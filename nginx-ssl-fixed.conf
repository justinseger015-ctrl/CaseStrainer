# HTTP server - redirect all traffic to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name wolf.law.uw.edu localhost;

    # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response
    return 301 https://$host$request_uri;
}

# HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name wolf.law.uw.edu localhost;

    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/WolfCertBundle.crt;
    ssl_certificate_key /etc/nginx/ssl/wolf.law.uw.edu.key;
    
    # Enable session resumption to improve HTTPS performance
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;

    # Modern configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers on;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    add_header Strict-Transport-Security 'max-age=15768000; includeSubDomains; preload' always;

    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/nginx/ssl/WolfCertBundle.crt;

    # Enable gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Handle the root path with a redirect to /casestrainer/
    location = / {
        return 301 https://$host/casestrainer/;
    }

    # API proxy to backend
    location ^~ /casestrainer/api/ {
        proxy_pass http://casestrainer-backend:5000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
        
        # Increase timeouts for long-running requests
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        send_timeout 300s;
        
        # CORS headers
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
            add_header Content-Type "text/plain";
            add_header Content-Length 0;
            return 204;
        }
    }

    # Serve static files directly with proper caching
    location ~* ^/casestrainer/assets/ {
        alias /usr/share/nginx/html/casestrainer/assets/;
        access_log off;
        expires 1y;
        add_header Cache-Control "public, no-transform";
        try_files $uri =404;
    }

    # Handle other static files (images, fonts, etc.)
    location ~* ^/casestrainer/(.*\.(?:png|jpg|jpeg|gif|ico|woff|woff2|ttf|svg|eot))$ {
        alias /usr/share/nginx/html/casestrainer/$1;
        access_log off;
        expires 1y;
        add_header Cache-Control "public, no-transform";
        try_files $uri =404;
    }

    # Handle the /casestrainer/ path for the SPA
    location ^~ /casestrainer/ {
        alias /usr/share/nginx/html/casestrainer/;
        try_files $uri $uri/ /index.html;
        
        # Add headers for single page app
        add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    }

    # Handle 404 errors
    error_page 404 /index.html;
    
    # Disable logging for favicon.ico
    location = /favicon.ico {
        access_log off;
        log_not_found off;
    }

    # Security headers for all responses
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
}
