# Import necessary modules
from flask import Flask, send_from_directory, request, jsonify, render_template, redirect, url_for
import os
import sys
import json
import sqlite3
import logging
import socket

# Import the API endpoints
from citation_api import citation_api

# Import the Enhanced Validator blueprint
from enhanced_validator_production import enhanced_validator_bp, register_enhanced_validator

# Create the Flask application
app = Flask(__name__)

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
app.logger.setLevel(logging.INFO)
app.logger.info("Starting CaseStrainer application with Vue.js frontend")

# Register the citation API blueprint
# Use both /api and /casestrainer/api to ensure it works with and without the prefix
app.register_blueprint(citation_api, url_prefix='/api')
# Add a log message to confirm API registration
app.logger.info("Citation API registered with prefix /api")

# Register the Enhanced Validator blueprint
register_enhanced_validator(app)
app.logger.info("Enhanced Validator blueprint registered with the application")

# Create a placeholder for the DATABASE_FILE constant
DATABASE_FILE = 'citations.db'

# We'll import the original app_final functionality AFTER defining our Vue.js routes
# This ensures our routes take precedence

# Add Vue.js routes to the Flask application
# Serve the Vue.js static files (keep the /vue/ path for backward compatibility)
@app.route('/vue/<path:path>')
@app.route('/casestrainer/vue/<path:path>')
def serve_vue_static_compat(path):
    vue_dist_dir = os.path.join(os.path.dirname(__file__), 'static', 'vue')
    return send_from_directory(vue_dist_dir, path)

# Serve static assets from the Vue.js build at the root
@app.route('/js/<path:path>')
@app.route('/casestrainer/js/<path:path>')
def serve_vue_js(path):
    vue_dist_dir = os.path.join(os.path.dirname(__file__), 'static', 'vue', 'js')
    return send_from_directory(vue_dist_dir, path)

@app.route('/css/<path:path>')
@app.route('/casestrainer/css/<path:path>')
def serve_vue_css(path):
    vue_dist_dir = os.path.join(os.path.dirname(__file__), 'static', 'vue', 'css')
    return send_from_directory(vue_dist_dir, path)

@app.route('/img/<path:path>')
@app.route('/casestrainer/img/<path:path>')
def serve_vue_img(path):
    vue_dist_dir = os.path.join(os.path.dirname(__file__), 'static', 'vue', 'img')
    return send_from_directory(vue_dist_dir, path)

@app.route('/fonts/<path:path>')
@app.route('/casestrainer/fonts/<path:path>')
def serve_vue_fonts(path):
    vue_dist_dir = os.path.join(os.path.dirname(__file__), 'static', 'vue', 'fonts')
    return send_from_directory(vue_dist_dir, path)

# Serve the Vue.js index.html at the root URL
@app.route('/')
@app.route('/casestrainer/')
def serve_vue_index():
    vue_dist_dir = os.path.join(os.path.dirname(__file__), 'static', 'vue')
    return send_from_directory(vue_dist_dir, 'index.html')

# Backward compatibility routes
@app.route('/vue/')
@app.route('/casestrainer/vue/')
def serve_vue_index_compat():
    return serve_vue_index()

@app.route('/vue')
@app.route('/casestrainer/vue')
def redirect_to_vue():
    return serve_vue_index()

# Redirect /original to /api for the original interface
@app.route('/original')
@app.route('/casestrainer/original')
def redirect_to_api():
    return redirect('/api/')

@app.route('/original/')
@app.route('/casestrainer/original/')
def redirect_to_api_slash():
    return redirect('/api/')

# Enhanced Validator routes
@app.route('/enhanced-validator')
@app.route('/casestrainer/enhanced-validator')
def serve_enhanced_validator():
    # Serve the Vue.js app and let it handle the route client-side
    vue_dist_dir = os.path.join(os.path.dirname(__file__), 'static', 'vue')
    return send_from_directory(vue_dist_dir, 'index.html')

# Special route to handle Vue.js hash-based routing
@app.route('/vue-enhanced-validator')
@app.route('/casestrainer/vue-enhanced-validator')
def redirect_from_vue_to_enhanced_validator():
    return redirect('/enhanced-validator')

# Serve the Enhanced Validator link page
@app.route('/enhanced-validator-link')
@app.route('/casestrainer/enhanced-validator-link')
def serve_enhanced_validator_link():
    return send_from_directory('static', 'enhanced_validator_link.html')

# Serve JSON files directly
@app.route('/citation_verification_results.json')
@app.route('/casestrainer/citation_verification_results.json')
def serve_citation_verification_results():
    return send_from_directory(os.path.dirname(__file__), 'citation_verification_results.json')

@app.route('/database_verification_results.json')
@app.route('/casestrainer/database_verification_results.json')
def serve_database_verification_results():
    return send_from_directory(os.path.dirname(__file__), 'database_verification_results.json')

# We'll update the links in the Vue.js frontend to point to /api/ instead of /original/

print("Vue.js routes added to Flask application")

# Create a placeholder index.html file in the static/vue directory if it doesn't exist
vue_dist_dir = os.path.join(os.path.dirname(__file__), 'static', 'vue')
if not os.path.exists(vue_dist_dir):
    os.makedirs(vue_dist_dir)
    
index_html_path = os.path.join(vue_dist_dir, 'index.html')
if not os.path.exists(index_html_path):
    with open(index_html_path, 'w') as f:
        f.write('''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CaseStrainer - Modern Legal Citation Verification</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .feature-icon {
            font-size: 2.5rem;
            color: #0d6efd;
            margin-bottom: 1rem;
        }
        .feature-card {
            transition: transform 0.3s;
            height: 100%;
        }
        .feature-card:hover {
            transform: translateY(-5px);
        }
        .navbar-brand {
            font-weight: bold;
        }
        .hero-section {
            background-color: #f8f9fa;
            padding: 4rem 0;
            margin-bottom: 2rem;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="/casestrainer/">CaseStrainer</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link active" href="/casestrainer/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/casestrainer/original/">Original Interface</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <section class="hero-section">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-lg-6">
                    <h1 class="display-4 fw-bold">CaseStrainer</h1>
                    <p class="lead">Advanced legal citation verification system with modern Vue.js interface</p>
                    <p>CaseStrainer helps legal professionals verify citations with confidence using multiple verification sources and machine learning.</p>
                    <div class="d-grid gap-2 d-md-flex justify-content-md-start">
                        <a href="/casestrainer/original/" class="btn btn-primary btn-lg px-4 me-md-2">Use Original Interface</a>
                        <button class="btn btn-outline-secondary btn-lg px-4" disabled>Vue.js Interface Coming Soon</button>
                    </div>
                </div>
                <div class="col-lg-6 text-center">
                    <div class="alert alert-info p-4">
                        <h4>Vue.js Frontend Under Development</h4>
                        <p>The new Vue.js interface is currently being built. Please use the Original Interface for now.</p>
                        <p class="mb-0"><small>When ready, the Vue.js frontend will be deployed to this location.</small></p>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <div class="container mb-5">
        <h2 class="text-center mb-4">Key Features</h2>
        <div class="row g-4">
            <div class="col-md-4">
                <div class="card h-100 feature-card">
                    <div class="card-body text-center">
                        <div class="feature-icon">üìä</div>
                        <h5 class="card-title">Citation Network Visualization</h5>
                        <p class="card-text">Interactive network graphs showing relationships between citations and highlighting patterns.</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card h-100 feature-card">
                    <div class="card-body text-center">
                        <div class="feature-icon">ü§ñ</div>
                        <h5 class="card-title">ML Citation Classifier</h5>
                        <p class="card-text">Machine learning model trained on citation data to identify patterns in unreliable citations.</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card h-100 feature-card">
                    <div class="card-body text-center">
                        <div class="feature-icon">üîç</div>
                        <h5 class="card-title">Multi-Source Verification</h5>
                        <p class="card-text">Verify citations against multiple authoritative sources for maximum confidence.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <footer class="bg-light py-4 mt-auto">
        <div class="container">
            <div class="row">
                <div class="col-md-6">
                    <p class="mb-0">CaseStrainer - Legal Citation Verification System</p>
                </div>
                <div class="col-md-6 text-md-end">
                    <p class="mb-0"><small>University of Washington School of Law</small></p>
                </div>
            </div>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
''')
    print(f"Created placeholder index.html at {index_html_path}")
else:
    print(f"Found existing index.html at {index_html_path}")

# Handle URL prefix for Nginx proxy
class PrefixMiddleware(object):
    def __init__(self, app, prefix=''):
        self.app = app
        self.prefix = prefix

    def __call__(self, environ, start_response):
        # Check if request has our prefix
        if self.prefix and environ['PATH_INFO'].startswith(self.prefix):
            # Strip the prefix
            environ['PATH_INFO'] = environ['PATH_INFO'][len(self.prefix):]
            environ['SCRIPT_NAME'] = self.prefix
        
        # Ensure PATH_INFO starts with a slash
        if not environ['PATH_INFO']:
            environ['PATH_INFO'] = '/'
        elif not environ['PATH_INFO'].startswith('/'):
            environ['PATH_INFO'] = '/' + environ['PATH_INFO']
            
        # Pass the modified environment to the app
        return self.app(environ, start_response)

# Apply the prefix middleware
# This allows the application to work both with and without the /casestrainer prefix
app.wsgi_app = PrefixMiddleware(app.wsgi_app, prefix='/casestrainer')
app.logger.info("PrefixMiddleware applied with prefix '/casestrainer'")

# Now import the original app_final functionality and register its routes under /api/
print("Importing original app_final.py functionality...")
with open('app_final.py', 'r') as f:
    app_final_code = f.read()

# Instead of trying to modify the original app_final.py code, let's create a simple proxy route
# that will forward requests from /api/ to the original CaseStrainer interface

@app.route('/api/<path:path>')
@app.route('/casestrainer/api/<path:path>')
def api_proxy(path):
    # Import the original app_final module
    import importlib.util
    import sys
    
    # Check if app_final is already imported
    if 'app_final' not in sys.modules:
        # Import app_final.py as a module
        spec = importlib.util.spec_from_file_location('app_final', 'app_final.py')
        app_final = importlib.util.module_from_spec(spec)
        sys.modules['app_final'] = app_final
        spec.loader.exec_module(app_final)
    else:
        # Use the already imported module
        app_final = sys.modules['app_final']
    
    # Get the Flask app from app_final
    original_app = app_final.app
    
    # Create a test request context for the original path
    with original_app.test_request_context(f'/{path}'):
        # Dispatch the request to the original app
        response = original_app.dispatch_request()
        return response

@app.route('/api/')
@app.route('/casestrainer/api/')
def api_root():
    # Redirect to the original CaseStrainer interface
    return redirect('/casestrainer/')

# Import some key functions and variables from app_final.py
try:
    # Execute the app_final.py code in a safe way to get helper functions and utilities
    locals_dict = {}
    globals_dict = globals().copy()
    
    # Modify the code to avoid duplicate Flask app creation
    modified_code = app_final_code.replace('app = Flask(__name__)', '# app already created')
    modified_code = modified_code.replace('@app.route', '# @app.route')
    modified_code = modified_code.split('if __name__ == \'__main__\':', 1)[0]
    
    # Execute the modified code to get helper functions and utilities
    exec(modified_code, globals_dict, locals_dict)
    
    # Get important functions and variables from the executed code
    for key in locals_dict:
        if key not in ['app', '__builtins__']:
            globals()[key] = locals_dict[key]
    
    print("Successfully imported functionality from app_final.py")
except Exception as e:
    print(f"Warning: Error importing from app_final.py: {e}")
    print("Continuing with limited functionality")

def get_ip_address():
    """Get the server's IP address for logging purposes"""
    try:
        # Get the server's IP address
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except Exception as e:
        app.logger.error(f"Error getting IP address: {e}")
        return "unknown"

if __name__ == '__main__':
    # Get command line arguments
    import argparse
    parser = argparse.ArgumentParser(description='Run CaseStrainer with Vue.js frontend')
    parser.add_argument('--host', default='0.0.0.0', help='Host to bind to')
    parser.add_argument('--port', type=int, default=5000, help='Port to bind to')
    parser.add_argument('--debug', action='store_true', help='Run in debug mode')
    parser.add_argument('--use-cheroot', action='store_true', help='Use Cheroot WSGI server (production mode)')
    args = parser.parse_args()
    
    # Check if we should run with Cheroot (production) or Flask's dev server
    use_cheroot = args.use_cheroot or os.environ.get('USE_CHEROOT', 'True').lower() in ('true', '1', 't')
    
    # Log server information
    server_ip = get_ip_address()
    app.logger.info(f"Server IP address: {server_ip}")
    app.logger.info(f"Starting CaseStrainer with Vue.js frontend on {args.host}:{args.port}")
    app.logger.info(f"Using Cheroot: {use_cheroot}")
    
    if use_cheroot:
        try:
            from cheroot.wsgi import Server as WSGIServer
            app.logger.info("Starting with Cheroot WSGI server (production mode)")
            
            # Configure Cheroot server with appropriate settings for production
            server = WSGIServer((args.host, args.port), app)
            server.max_request_header_size = 0  # No limit
            server.max_request_body_size = 0  # No limit
            server.request_queue_size = 50  # Increased from default
            server.nodelay = True  # Disable Nagle's algorithm for better performance
            
            try:
                app.logger.info(f"Server started on http://{args.host}:{args.port}")
                app.logger.info(f"External access URL: https://wolf.law.uw.edu/casestrainer/")
                server.start()
            except KeyboardInterrupt:
                server.stop()
                app.logger.info("Server stopped due to keyboard interrupt.")
            except Exception as e:
                app.logger.error(f"Error starting Cheroot server: {e}")
                sys.exit(1)
        except ImportError:
            app.logger.warning("Cheroot not installed. Installing now...")
            try:
                import subprocess
                subprocess.check_call([sys.executable, "-m", "pip", "install", "cheroot"])
                app.logger.info("Cheroot installed. Please restart the application.")
                sys.exit(0)
            except Exception as e:
                app.logger.error(f"Failed to install Cheroot: {e}")
                app.logger.warning("Falling back to Flask development server")
                app.run(debug=args.debug, host=args.host, port=args.port)
    else:
        app.logger.info("Starting with Flask development server")
        app.run(debug=args.debug, host=args.host, port=args.port)
