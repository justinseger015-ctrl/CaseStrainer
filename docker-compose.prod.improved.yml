services:
  # Data Layer with improved configuration
  redis:
    image: redis:7-alpine
    container_name: casestrainer-redis-prod
    ports:
      - "6380:6379"
    volumes:
      - redis_data_prod:/data
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=caseStrainerRedis123
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app-network
    command: ["redis-server", "--bind", "0.0.0.0", "--port", "6379", "--requirepass", "caseStrainerRedis123", "--appendonly", "yes", "--maxmemory", "512mb", "--maxmemory-policy", "allkeys-lru"]
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Application Layer with improved resource management
  backend:
    build: .
    container_name: casestrainer-backend-prod
    command: waitress-serve --host=0.0.0.0 --port=5000 --threads=2 --max-request-body-size=52428800 src.app_final_vue:app
    ports:
      - "5000:5000"
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_URL=redis://:caseStrainerRedis123@redis:6379/0
      - FLASK_ENV=production
      - FLASK_DEBUG=False
      - PYTHONPATH=/app
      - LOG_LEVEL_CASE_NAME_EXTRACTION=INFO
      - COURTLISTENER_API_KEY=443a87912e4f444fb818fca454364d71e4aa9f91
      - WAITRESS_THREADS=2
      - WAITRESS_MAX_REQUEST_BODY_SIZE=52428800
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      - ./src:/app/src
      - ./data:/app/data
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./citation_cache:/app/citation_cache
      - ./correction_cache:/app/correction_cache
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/casestrainer/api/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '1.5'
        reservations:
          memory: 1.5G
          cpus: '0.75'
    # Add memory monitoring
    labels:
      - "com.docker.compose.project=casestrainer"
      - "com.docker.compose.service=backend"
    # Add logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # RQ Workers with improved configuration
  rqworker:
    build: .
    container_name: casestrainer-rqworker-prod
    command: python src/rq_worker.py
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_URL=redis://:caseStrainerRedis123@redis:6379/0
      - CASTRAINER_ENV=production
      - PYTHONPATH=/app
      - COURTLISTENER_API_KEY=443a87912e4f444fb818fca454364d71e4aa9f91
      - RQ_QUEUE_NAME=casestrainer
      - RQ_MAX_JOBS=50
      - RQ_MAX_MEMORY_MB=512
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      - ./src:/app/src
      - ./uploads:/app/uploads
      - ./data:/app/data
      - ./logs:/app/logs
      - ./casestrainer_sessions:/app/casestrainer_sessions
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "src/healthcheck_rq.py"]
      interval: 60s
      timeout: 30s
      retries: 8
      start_period: 180s
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '0.75'
        reservations:
          memory: 768M
          cpus: '0.375'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  rqworker2:
    build: .
    container_name: casestrainer-rqworker2-prod
    command: python src/rq_worker.py
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_URL=redis://:caseStrainerRedis123@redis:6379/0
      - CASTRAINER_ENV=production
      - PYTHONPATH=/app
      - COURTLISTENER_API_KEY=443a87912e4f444fb818fca454364d71e4aa9f91
      - RQ_QUEUE_NAME=casestrainer
      - RQ_MAX_JOBS=50
      - RQ_MAX_MEMORY_MB=512
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      - ./uploads:/app/uploads
      - ./data:/app/data
      - ./logs:/app/logs
      - ./casestrainer_sessions:/app/casestrainer_sessions
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "src/healthcheck_rq.py"]
      interval: 60s
      timeout: 30s
      retries: 8
      start_period: 180s
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '0.75'
        reservations:
          memory: 768M
          cpus: '0.375'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  rqworker3:
    build: .
    container_name: casestrainer-rqworker3-prod
    command: python src/rq_worker.py
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_URL=redis://:caseStrainerRedis123@redis:6379/0
      - CASTRAINER_ENV=production
      - PYTHONPATH=/app
      - COURTLISTENER_API_KEY=443a87912e4f444fb818fca454364d71e4aa9f91
      - RQ_QUEUE_NAME=casestrainer
      - RQ_MAX_JOBS=50
      - RQ_MAX_MEMORY_MB=512
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      - ./src:/app/src
      - ./uploads:/app/uploads
      - ./data:/app/data
      - ./logs:/app/logs
      - ./casestrainer_sessions:/app/casestrainer_sessions
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "src/healthcheck_rq.py"]
      interval: 60s
      timeout: 30s
      retries: 8
      start_period: 180s
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '0.75'
        reservations:
          memory: 768M
          cpus: '0.375'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend Production Build
  frontend-prod:
    build: 
      context: ./casestrainer-vue-new
      dockerfile: Dockerfile.prod
    container_name: casestrainer-frontend-prod
    ports:
      - "8080:80"
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 60s
      timeout: 30s
      retries: 8
      start_period: 180s
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.125'

  # Infrastructure Layer
  nginx:
    image: nginx:latest
    container_name: casestrainer-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d/casestrainer.conf:/etc/nginx/conf.d/casestrainer.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./casestrainer-vue-new/dist:/usr/share/nginx/html:ro
    environment:
      - BACKEND_SERVICE_NAME=casestrainer-backend-prod
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:80/casestrainer/api/health || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 8
      start_period: 180s
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.125'

volumes:
  redis_data_prod:

networks:
  app-network:
    driver: bridge 