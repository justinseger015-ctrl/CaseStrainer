#!/usr/bin/env python3
"""
Test Phase 2 and Phase 3 deprecation warnings
"""

import sys
from pathlib import Path
import warnings

# Add src to path
sys.path.append(str(Path(__file__).parent / 'src'))

def test_enhanced_courtlistener_verifier_deprecation():
    """Test that EnhancedCourtListenerVerifier issues deprecation warning."""
    print("üß™ Testing EnhancedCourtListenerVerifier Deprecation")
    print("=" * 60)
    
    warnings_captured = []
    
    def warning_handler(message, category, filename, lineno, file=None, line=None):
        warnings_captured.append({
            'message': str(message),
            'category': category.__name__,
            'filename': filename,
            'lineno': lineno
        })
    
    # Capture warnings
    old_showwarning = warnings.showwarning
    warnings.showwarning = warning_handler
    
    try:
        # Import and instantiate EnhancedCourtListenerVerifier
        from enhanced_courtlistener_verification import EnhancedCourtListenerVerifier
        
        # This should trigger a deprecation warning
        verifier = EnhancedCourtListenerVerifier("test_api_key")
        
        # Check if deprecation warning was issued
        deprecation_warnings = [w for w in warnings_captured if w['category'] == 'DeprecationWarning']
        
        print(f"‚úÖ Warnings captured: {len(warnings_captured)}")
        print(f"‚úÖ Deprecation warnings: {len(deprecation_warnings)}")
        
        if deprecation_warnings:
            for warning in deprecation_warnings:
                print(f"üìã Warning: {warning['message']}")
            print("üéâ SUCCESS: EnhancedCourtListenerVerifier properly issues deprecation warning!")
            return True
        else:
            print("‚ùå FAILURE: No deprecation warning issued")
            return False
            
    except Exception as e:
        print(f"‚ùå Error testing EnhancedCourtListenerVerifier: {e}")
        return False
    finally:
        warnings.showwarning = old_showwarning

def test_enhanced_fallback_verifier_deprecation():
    """Test that EnhancedFallbackVerifier issues deprecation warning."""
    print("\nüß™ Testing EnhancedFallbackVerifier Deprecation")
    print("=" * 60)
    
    warnings_captured = []
    
    def warning_handler(message, category, filename, lineno, file=None, line=None):
        warnings_captured.append({
            'message': str(message),
            'category': category.__name__,
            'filename': filename,
            'lineno': lineno
        })
    
    # Capture warnings
    old_showwarning = warnings.showwarning
    warnings.showwarning = warning_handler
    
    try:
        # Import and instantiate EnhancedFallbackVerifier
        from enhanced_fallback_verifier import EnhancedFallbackVerifier
        
        # This should trigger a deprecation warning
        verifier = EnhancedFallbackVerifier()
        
        # Check if deprecation warning was issued
        deprecation_warnings = [w for w in warnings_captured if w['category'] == 'DeprecationWarning']
        
        print(f"‚úÖ Warnings captured: {len(warnings_captured)}")
        print(f"‚úÖ Deprecation warnings: {len(deprecation_warnings)}")
        
        if deprecation_warnings:
            for warning in deprecation_warnings:
                print(f"üìã Warning: {warning['message']}")
            print("üéâ SUCCESS: EnhancedFallbackVerifier properly issues deprecation warning!")
            return True
        else:
            print("‚ùå FAILURE: No deprecation warning issued")
            return False
            
    except Exception as e:
        print(f"‚ùå Error testing EnhancedFallbackVerifier: {e}")
        return False
    finally:
        warnings.showwarning = old_showwarning

def test_unified_sync_processor_deprecation():
    """Test that UnifiedSyncProcessor issues deprecation warning."""
    print("\nüß™ Testing UnifiedSyncProcessor Deprecation")
    print("=" * 60)
    
    warnings_captured = []
    
    def warning_handler(message, category, filename, lineno, file=None, line=None):
        warnings_captured.append({
            'message': str(message),
            'category': category.__name__,
            'filename': filename,
            'lineno': lineno
        })
    
    # Capture warnings
    old_showwarning = warnings.showwarning
    warnings.showwarning = warning_handler
    
    try:
        # Import and instantiate UnifiedSyncProcessor
        from unified_sync_processor import UnifiedSyncProcessor
        
        # This should trigger a deprecation warning
        processor = UnifiedSyncProcessor()
        
        # Check if deprecation warning was issued
        deprecation_warnings = [w for w in warnings_captured if w['category'] == 'DeprecationWarning']
        
        print(f"‚úÖ Warnings captured: {len(warnings_captured)}")
        print(f"‚úÖ Deprecation warnings: {len(deprecation_warnings)}")
        
        if deprecation_warnings:
            for warning in deprecation_warnings:
                print(f"üìã Warning: {warning['message']}")
            print("üéâ SUCCESS: UnifiedSyncProcessor properly issues deprecation warning!")
            return True
        else:
            print("‚ùå FAILURE: No deprecation warning issued")
            return False
            
    except Exception as e:
        print(f"‚ùå Error testing UnifiedSyncProcessor: {e}")
        return False
    finally:
        warnings.showwarning = old_showwarning

def test_processing_options_still_works():
    """Test that ProcessingOptions still works (not deprecated yet)."""
    print("\nüß™ Testing ProcessingOptions (Should Still Work)")
    print("=" * 60)
    
    warnings_captured = []
    
    def warning_handler(message, category, filename, lineno, file=None, line=None):
        warnings_captured.append({
            'message': str(message),
            'category': category.__name__,
            'filename': filename,
            'lineno': lineno
        })
    
    # Capture warnings
    old_showwarning = warnings.showwarning
    warnings.showwarning = warning_handler
    
    try:
        # Import and instantiate ProcessingOptions
        from unified_sync_processor import ProcessingOptions
        
        # This should NOT trigger a deprecation warning (yet)
        options = ProcessingOptions()
        
        # Check if any warnings were issued
        deprecation_warnings = [w for w in warnings_captured if w['category'] == 'DeprecationWarning']
        
        print(f"‚úÖ Warnings captured: {len(warnings_captured)}")
        print(f"‚úÖ Deprecation warnings: {len(deprecation_warnings)}")
        print(f"‚úÖ ProcessingOptions created: {options is not None}")
        
        if len(deprecation_warnings) == 0:
            print("üéâ SUCCESS: ProcessingOptions does not issue deprecation warnings (as expected)!")
            return True
        else:
            print("‚ùå UNEXPECTED: ProcessingOptions issued deprecation warnings")
            for warning in deprecation_warnings:
                print(f"üìã Unexpected warning: {warning['message']}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error testing ProcessingOptions: {e}")
        return False
    finally:
        warnings.showwarning = old_showwarning

def test_main_pipeline_still_works():
    """Test that the main pipeline still works without warnings."""
    print("\nüß™ Testing Main Pipeline (Should Work Without Warnings)")
    print("=" * 60)
    
    warnings_captured = []
    
    def warning_handler(message, category, filename, lineno, file=None, line=None):
        warnings_captured.append({
            'message': str(message),
            'category': category.__name__,
            'filename': filename,
            'lineno': lineno
        })
    
    # Capture warnings
    old_showwarning = warnings.showwarning
    warnings.showwarning = warning_handler
    
    try:
        # Import and use UnifiedCitationProcessorV2 (main pipeline)
        from unified_citation_processor_v2 import UnifiedCitationProcessorV2
        
        # This should NOT trigger any deprecation warnings
        processor = UnifiedCitationProcessorV2()
        
        # Check if any deprecation warnings were issued
        deprecation_warnings = [w for w in warnings_captured if w['category'] == 'DeprecationWarning']
        
        print(f"‚úÖ Warnings captured: {len(warnings_captured)}")
        print(f"‚úÖ Deprecation warnings: {len(deprecation_warnings)}")
        print(f"‚úÖ Main processor created: {processor is not None}")
        
        if len(deprecation_warnings) == 0:
            print("üéâ SUCCESS: Main pipeline works without deprecation warnings!")
            return True
        else:
            print("‚ùå UNEXPECTED: Main pipeline issued deprecation warnings")
            for warning in deprecation_warnings:
                print(f"üìã Unexpected warning: {warning['message']}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error testing main pipeline: {e}")
        return False
    finally:
        warnings.showwarning = old_showwarning

def main():
    print("üîç Testing Phase 2 & 3 Deprecation Warnings")
    print("=" * 70)
    print("Verifying that Phase 2 and 3 components issue proper warnings")
    print("=" * 70)
    
    results = {
        'enhanced_courtlistener_verifier': test_enhanced_courtlistener_verifier_deprecation(),
        'enhanced_fallback_verifier': test_enhanced_fallback_verifier_deprecation(),
        'unified_sync_processor': test_unified_sync_processor_deprecation(),
        'processing_options_still_works': test_processing_options_still_works(),
        'main_pipeline_still_works': test_main_pipeline_still_works()
    }
    
    print(f"\n" + "=" * 70)
    print("üìã SUMMARY")
    print("=" * 70)
    
    for test_name, success in results.items():
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} {test_name.replace('_', ' ').title()}")
    
    total_passed = sum(results.values())
    total_tests = len(results)
    
    print(f"\nüéØ OVERALL RESULT: {total_passed}/{total_tests} tests passed")
    
    if total_passed == total_tests:
        print("üéâ SUCCESS: All Phase 2 & 3 deprecation warnings are working properly!")
        print("‚úÖ Phase 2 verification classes issue warnings")
        print("‚úÖ Phase 3 UnifiedSyncProcessor issues warnings")
        print("‚úÖ ProcessingOptions still works (not deprecated yet)")
        print("‚úÖ Main pipeline works without warnings")
    else:
        print("‚ö†Ô∏è Some deprecation warnings need attention")
    
    print(f"\nüí° PHASE 2 & 3 BENEFITS:")
    print("‚Ä¢ Enhanced verification classes properly deprecated")
    print("‚Ä¢ UnifiedSyncProcessor deprecated due to architectural bypass")
    print("‚Ä¢ ProcessingOptions preserved for gradual migration")
    print("‚Ä¢ Main pipeline remains clean and functional")
    print("‚Ä¢ Clear migration guidance provided to users")

if __name__ == "__main__":
    main()
