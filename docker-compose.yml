services:
  # Data Layer
  redis:
    image: redis:7-alpine
    container_name: casestrainer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Application Layer
  backend:
    build: .
    container_name: casestrainer-backend
    command: python src/app_final_vue.py
    ports:
      - "5000:5000"
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_URL=redis://casestrainer-redis:6379/0
      - FLASK_ENV=production
      - CASTRAINER_ENV=production
      - PYTHONPATH=/app
      - COURTLISTENER_API_KEY=443a87912e4f444fb818fca454364d71e4aa9f91
    volumes:
      - ./uploads:/app/uploads
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/casestrainer/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  rqworker:
    build: .
    container_name: casestrainer-rqworker
    command: python src/rq_worker.py
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_URL=redis://casestrainer-redis:6379/0
      - CASTRAINER_ENV=production
      - PYTHONPATH=/app
      - COURTLISTENER_API_KEY=443a87912e4f444fb818fca454364d71e4aa9f91
      - RQ_QUEUE_NAME=casestrainer
      - RQ_MAX_JOBS=100
      - RQ_MAX_MEMORY_MB=1024
    volumes:
      - ./uploads:/app/uploads
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r = redis.Redis(host='redis', port=6379); r.ping()"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Layer (Development)
  frontend-dev:
    build: 
      context: ./casestrainer-vue-new
      dockerfile: Dockerfile.dev
    container_name: casestrainer-frontend-dev
    ports:
      - "5173:5173"
    volumes:
      - ./casestrainer-vue-new:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    restart: unless-stopped

  # Frontend Layer (Production Build)
  frontend-prod:
    build: 
      context: ./casestrainer-vue-new
      dockerfile: Dockerfile.prod
    container_name: casestrainer-frontend-prod
    ports:
      - "8080:80"
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Infrastructure Layer
  nginx:
    image: nginx:alpine
    container_name: casestrainer-nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl/WolfCertBundle.crt:/etc/nginx/ssl/WolfCertBundle.crt
      - ./ssl/wolf.law.uw.edu.key:/etc/nginx/ssl/wolf.law.uw.edu.key
      - ./static:/usr/share/nginx/html/static
    depends_on:
      backend:
        condition: service_healthy
      frontend-prod:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-kf", "https://localhost/casestrainer/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:

networks:
  app-network:
    driver: bridge