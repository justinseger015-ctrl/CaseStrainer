name: Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Quick Backend Tests
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Set up Python path
      run: |
        export PYTHONPATH="${PYTHONPATH}:${GITHUB_WORKSPACE}"
        echo "PYTHONPATH=${PYTHONPATH}" >> $GITHUB_ENV

    - name: Run core backend tests
      run: |
        export PYTHONPATH="${PYTHONPATH}:${GITHUB_WORKSPACE}"
        pytest src/ --cov=src --cov-report=term-missing -v
        pytest scripts/test_citation_extraction.py tests/test_backend_api.py tests/test_cluster_api.py -v

    - name: Run linting
      run: |
        ruff check src/ || true
        # Bandit scan - only high severity issues are critical for CI
        bandit -r src/ -f json -o bandit-report.json -c .bandit --severity-level high

  # Frontend Build Check
  test-frontend:
    name: Frontend Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: casestrainer-vue-new/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd casestrainer-vue-new
        npm ci

    - name: Build frontend
      run: |
        cd casestrainer-vue-new
        npm run build

    - name: Run frontend tests (if available)
      run: |
        cd casestrainer-vue-new
        npm run test:unit || echo "No unit tests configured"

  # Docker Build Check
  test-docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker images
      run: |
        docker-compose build

    - name: Verify Docker images
      run: |
        docker images | grep casestrainer 