name: CaseStrainer CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REDIS_URL: redis://localhost:6379/0

jobs:
  # Backend Python Testing
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: false

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Set up Python path
      run: |
        export PYTHONPATH="${PYTHONPATH}:${GITHUB_WORKSPACE}"
        echo "PYTHONPATH=${PYTHONPATH}" >> $GITHUB_ENV

    - name: Run backend tests
      run: |
        export PYTHONPATH="${PYTHONPATH}:${GITHUB_WORKSPACE}"
        pytest src/ --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing
        pytest test_*.py --cov=src --cov-append --cov-report=term-missing

    - name: Run architecture validation tests
      run: |
        export PYTHONPATH="${PYTHONPATH}:${GITHUB_WORKSPACE}"
        pytest test_minimal_suite.py -v

    - name: Run performance optimization tests
      run: |
        export PYTHONPATH="${PYTHONPATH}:${GITHUB_WORKSPACE}"

    - name: Run code quality validation tests
      run: |
        export PYTHONPATH="${PYTHONPATH}:${GITHUB_WORKSPACE}"

    - name: Run PDF vs text fix validation
      run: |
        export PYTHONPATH="${PYTHONPATH}:${GITHUB_WORKSPACE}"

    - name: Run security scan
      run: |
        # Bandit scan - only high severity issues are critical for CI
        # Medium/low issues are acceptable for this codebase (pickle for ML, subprocess for system ops)
        bandit -r src/ -f json -o bandit-report.json -c .bandit --severity-level high

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/

  # Frontend Vue.js Testing
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: false

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: casestrainer-vue-new/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd casestrainer-vue-new
        npm ci

    - name: Run frontend linting
      run: |
        cd casestrainer-vue-new
        npm run lint || true

    - name: Build frontend
      run: |
        cd casestrainer-vue-new
        npm run build

    - name: Upload frontend build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: casestrainer-vue-new/dist/

  # Docker Container Testing
  test-docker:
    name: Test Docker Containers
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: false

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker images
      run: |
        docker-compose build

    - name: Start services
      run: |
        docker-compose up -d redis backend rqworker

    - name: Wait for services to be ready
      run: |
        sleep 30
        docker-compose ps

    - name: Test backend health
      run: |
        curl -f http://localhost:5000/casestrainer/api/health || exit 1

    - name: Test Redis connection
      run: |
        docker exec casestrainer-backend python -c "
        import redis
        r = redis.Redis(host='redis', port=6379)
        r.ping()
        print('Redis connection successful')
        "

    - name: Stop services
      if: always()
      run: docker-compose down

  # Integration Testing
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: false

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Set up Python path
      run: |
        export PYTHONPATH="${PYTHONPATH}:${GITHUB_WORKSPACE}"
        echo "PYTHONPATH=${PYTHONPATH}" >> $GITHUB_ENV

    - name: Run integration tests
      run: |
        export PYTHONPATH="${PYTHONPATH}:${GITHUB_WORKSPACE}"
        pytest tests/integration/ --cov=src --cov-append --cov-report=term-missing

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: test-results/

  # Security and Quality Checks
  security-checks:
    name: Security and Quality
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: false

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        # Bandit scan - only high severity issues are critical for CI
        # Medium/low issues are acceptable for this codebase (pickle for ML, subprocess for system ops)
        bandit -r src/ -f json -o bandit-report.json -c .bandit --severity-level high

    - name: Run Safety dependency check
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Build and Deploy (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-docker, test-integration, security-checks]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: false

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build production images
      run: |
        docker-compose -f docker-compose.prod.yml build

    - name: Deploy to production
      run: |
        echo "Deployment would happen here"
        echo "Production deployment completed successfully" 