name: CaseStrainer CI/CD Pipeline

# Trigger on push to main branch and pull requests
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual triggering

# Environment variables
env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  
  # Application-specific variables
  FLASK_ENV: production
  CASTRAINER_ENV: production
  PYTHONPATH: /app
  
  # Redis configuration
  REDIS_URL: redis://localhost:6379/0
  RQ_QUEUE_NAME: casestrainer
  RQ_MAX_JOBS: 100
  RQ_MAX_MEMORY_MB: 1024

jobs:
  # Backend testing job
  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run backend tests
      run: |
        python -m pytest tests/ -v
      env:
        COURTLISTENER_API_KEY: ${{ secrets.COURTLISTENER_API_KEY }}
    
    - name: Run linting
      run: |
        pip install flake8 black
        flake8 src/ --max-line-length=120
        black --check src/

  # Frontend testing job
  test-frontend:
    runs-on: ubuntu-latest
    needs: test-backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: casestrainer-vue-new/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: casestrainer-vue-new
      run: npm ci
    
    - name: Run frontend tests
      working-directory: casestrainer-vue-new
      run: npm test
    
    - name: Build frontend
      working-directory: casestrainer-vue-new
      run: npm run build

  # Docker build and test job
  test-docker:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Build and test Docker images
      run: |
        docker-compose -f docker-compose.prod.yml build
        docker-compose -f docker-compose.prod.yml up -d
        sleep 30
        curl -f http://localhost:5001/casestrainer/api/health || exit 1
        docker-compose -f docker-compose.prod.yml down

  # Deployment job (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_DEPLOY_KEY }}
        script: |
          cd /opt/casestrainer
          git pull origin main
          docker-compose -f docker-compose.prod.yml down
          docker-compose -f docker-compose.prod.yml build --no-cache
          docker-compose -f docker-compose.prod.yml up -d
          docker system prune -f 