// CaseStrainer Vue.js Frontend Scripts

// Global state to track processing status
window.citationProcessing = {
    isProcessing: false,
    analysisId: null,
    startTime: null,
    elapsedTimeInterval: null,
    totalCitations: 0,
    processedCitations: 0,
    progressInterval: null
};

document.addEventListener('DOMContentLoaded', function() {
    // Always use the /casestrainer/ prefix for API calls to work with Nginx proxy
    const basePath = window.location.pathname.includes('/casestrainer/') ? '/casestrainer' : '';
    const uploadForm = document.getElementById('uploadForm');
    const pasteForm = document.getElementById('pasteForm');
    
    // Handle file upload form submission
    if (uploadForm) {
        uploadForm.addEventListener('submit', function(e) {
            e.preventDefault(); // Prevent traditional form submission
            
            const submitButton = this.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;
            submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Analyzing...';
            submitButton.disabled = true;
            
            const formData = new FormData(this);
            
            fetch(`${basePath}/api/analyze`, {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Analysis results:', data);
                
                // Store the analysis results
                window.analysisResults = data;
                
                // No longer automatically switch tabs - stay on current tab
                // User can manually select which tab to view after processing
                
                // Reset button
                submitButton.innerHTML = originalButtonText;
                submitButton.disabled = false;
            })
            .catch(error => {
                console.error('Error analyzing document:', error);
                alert('Error analyzing document: ' + error.message);
                
                // Reset button
                submitButton.innerHTML = originalButtonText;
                submitButton.disabled = false;
            });
        });
    }
    
    // Handle paste text form submission
    if (pasteForm) {
        pasteForm.addEventListener('submit', function(e) {
            e.preventDefault(); // Prevent traditional form submission
            
            const submitButton = this.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;
            submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Analyzing...';
            submitButton.disabled = true;
            
            const formData = new FormData(this);
            
            fetch(`${basePath}/api/analyze`, {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Analysis results:', data);
                
                // Store the analysis results
                window.analysisResults = data;
                
                // No longer automatically switch tabs - stay on current tab
                // User can manually select which tab to view after processing
                
                // Reset button
                submitButton.innerHTML = originalButtonText;
                submitButton.disabled = false;
            })
            .catch(error => {
                console.error('Error analyzing document:', error);
                alert('Error analyzing document: ' + error.message);
                
                // Reset button
                submitButton.innerHTML = originalButtonText;
                submitButton.disabled = false;
            });
        });
    }
    
    // Load data for tabs when they're clicked
    const tabButtons = document.querySelectorAll('.nav-link[data-bs-toggle="tab"]');
    tabButtons.forEach(button => {
        button.addEventListener('click', function() {
            const tabId = this.getAttribute('data-bs-target');
            
            // Load data based on which tab was clicked
            if (tabId === '#multitool' && document.querySelector('#multitool-tab.active')) {
                // This will be handled by the multitool-citations.js file
            } else if (tabId === '#unconfirmed' && document.querySelector('#unconfirmed-tab.active')) {
                // This will be handled by the unconfirmed-citations.js file
            } else if (tabId === '#cl-gaps' && document.querySelector('#cl-gaps-tab.active')) {
                // This will be handled by the courtlistener-gaps.js file
            }
        });
    });
});
