#!/usr/bin/env python3
"""
Test script to extract "City of Seattle v. Wiggins" from the Washington Supreme Court opinion
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.extract_case_name import extract_case_name_from_context, extract_case_name_from_context_split

# Sample text from the Washington Supreme Court opinion
# This represents the context around where "City of Seattle v. Wiggins" might appear
sample_context = """
Smith makes clear that the State cannot satisfy the confrontation clause by letting a surrogate analyst present out-of-court statements as a basis for their expert opinion. Smith specifically reasoned that those statements "come into evidence for their truth-because only if true can they provide a reason to credit the substitute expert." 602 U.S. at 803 . At first glance, this new rule seems sound: "The jury cannot decide whether the expert's opinion is credible without evaluating the truth of the factual assertions on which it is based. If believed true, that basis evidence will lead the jury to credit the opinion; if believed false, it will do the opposite." Id. at 796 (citation omitted). What Smith leaves unclear is its logical endpoint. While the Court explained that not every statement is testimonial, and thus not every statement that forms the basis of the expert's opinion comes up against the confrontation clause, Smith leaves open exactly what is and is not a testimonial statement. Id. at 801 . It remains unclear what sort of statements that form the basis of an expert's opinion come up against the confrontation clause, and must be subject to a defendant's cross examination, and what sort of statements do not.

Under Smith, the absent analyst's report came in for its truthfulness, which requires the absent analyst to testify-not the surrogate. But what else implicates the truthfulness of the underlying report? Here, the expert who supervised the absent analyst testified as to the test results in the report and the various quality assurance protocols and policies followed by the laboratory, and she addressed how the testing machines are utilized by analysts and how they generate results. Under Smith, are the results generated by the laboratory machines, the truthfulness of which the analyst relies on when authoring their report, also subject to the confrontation clause? If such statements are hearsay, which I believe they are (because they are to be used for their truth), are they also testimonial? The machine's results are inculpatory in that they are generated only for an accusatory or prosecutorial purpose. So, who must be called when evaluating the reliability of the testing process the laboratory analyst relied on in creating their report? Must the designer of the machine that generated the test result testify as to the proper design and accurate functioning of the machine? If so, who else should be required to testify as to the underlying truthfulness of the test?

These issues in Smith's are not mere wrinkles-they will affect our legal system, as courts are bound to struggle to mark the outer limits of Smith's new requirement. To be clear, the purpose of the confrontation clause in our system is a salutary one. Criminal defendants must be empowered to rigorously test the State's evidence, and scrutinizing the results generated by the toxicology laboratory is an effective means of subjecting the State's awesome prosecutorial powers to such scrutiny. Nonetheless, I fear that the logical extension of Smith and its abrogation of Lui will not help ensure that justice prevails in Washington's courtrooms. Instead, I suspect that the abrogation of Lui will, at least for a time while we work through this, increase the work for our laboratories and complicate the trial process.

With these observations, I respectfully concur. City of Seattle v. Wiggins, 515 P.3d 1029 (Wash. 2022).
"""

# Test different citation formats that might appear in the document
test_citations = [
    "515 P.3d 1029",
    "515 P.3d 1029 (Wash. 2022)",
    "515 P.3d 1029 (Wash. 2022)",
    "515 P.3d 1029 (Wash. 2022)",
    "515 P.3d 1029 (Wash. 2022)",
]

print("Testing extraction of 'City of Seattle v. Wiggins' from Washington Supreme Court opinion")
print("=" * 80)

for i, citation in enumerate(test_citations, 1):
    print(f"\nTest {i}: Citation '{citation}'")
    print("-" * 50)
    
    # Test the main extraction function
    result1 = extract_case_name_from_context(sample_context, citation)
    print(f"Main function result: '{result1}'")
    
    # Test the split-based extraction function
    result2 = extract_case_name_from_context_split(sample_context, citation)
    print(f"Split function result: '{result2}'")
    
    # Check if either function found the expected case name
    expected = "City of Seattle v. Wiggins"
    if expected in result1 or expected in result2:
        print(f"✓ SUCCESS: Found expected case name '{expected}'")
    else:
        print(f"✗ FAILED: Did not find expected case name '{expected}'")

# Test with just the context (no citation)
print(f"\nTest with context only (no citation):")
print("-" * 50)
result1 = extract_case_name_from_context(sample_context)
result2 = extract_case_name_from_context_split(sample_context)
print(f"Main function result: '{result1}'")
print(f"Split function result: '{result2}'")

# Test with a shorter context that includes the case name
short_context = """
With these observations, I respectfully concur. City of Seattle v. Wiggins, 515 P.3d 1029 (Wash. 2022).
"""

print(f"\nTest with shorter context:")
print("-" * 50)
result1 = extract_case_name_from_context(short_context, "515 P.3d 1029")
result2 = extract_case_name_from_context_split(short_context, "515 P.3d 1029")
print(f"Main function result: '{result1}'")
print(f"Split function result: '{result2}'")

# Test with context that has the case name before the citation
context_with_case_before = """
The court's reasoning in City of Seattle v. Wiggins, 515 P.3d 1029 (Wash. 2022), supports this conclusion.
"""

print(f"\nTest with case name before citation:")
print("-" * 50)
result1 = extract_case_name_from_context(context_with_case_before, "515 P.3d 1029")
result2 = extract_case_name_from_context_split(context_with_case_before, "515 P.3d 1029")
print(f"Main function result: '{result1}'")
print(f"Split function result: '{result2}'") 