"""
Search Engine Metadata Module
Handles metadata extraction and case information from search results.
"""

import re
from src.config import DEFAULT_REQUEST_TIMEOUT, COURTLISTENER_TIMEOUT, CASEMINE_TIMEOUT, WEBSEARCH_TIMEOUT, SCRAPINGBEE_TIMEOUT

from datetime import datetime
from typing import Dict, List, Any, Optional


class SearchEngineMetadata:
    """Container for search engine metadata when page content is unavailable."""
    
    def __init__(self, title: Optional[str] = None, snippet: Optional[str] = None, 
                 url: Optional[str] = None, source: Optional[str] = None, 
                 timestamp: Optional[str] = None):
        self.title = title
        self.snippet = snippet
        self.url = url
        self.source = source
        self.timestamp = timestamp or datetime.now().isoformat()
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'title': self.title,
            'snippet': self.snippet,
            'url': self.url,
            'source': self.source,
            'timestamp': self.timestamp,
            'type': 'search_engine_metadata'
        }
    
    def extract_case_info(self) -> Dict[str, Any]:
        """Extract case information from search engine metadata."""
        result = {
            'case_name': None,
            'date': None,
            'court': None,
            'confidence': 0.0,
            'extraction_method': 'search_engine_metadata'
        }
        
        text = f"{self.title or ''} {self.snippet or ''}"
        
        case_name = self._extract_case_name_from_text(text)
        if case_name:
            result['case_name'] = case_name
            result['confidence'] += 0.3
        
        date = self._extract_date_from_text(text)
        if date:
            result['date'] = date
            result['confidence'] += 0.2
        
        court = self._extract_court_from_text(text)
        if court:
            result['court'] = court
            result['confidence'] += 0.1
        
        return result
    
    def _extract_case_name_from_text(self, text: str) -> Optional[str]:
        """Extract case name from search engine text."""
        patterns = [
            r'([A-Z][A-Za-z\s,&\.]+v\.?\s+[A-Z][A-Za-z\s,&\.]+)',
            r'(State\s+v\.?\s+[A-Z][A-Za-z\s,&\.]+)',
            r'(United\s+States\s+v\.?\s+[A-Z][A-Za-z\s,&\.]+)',
            r'(In\s+re\s+[A-Z][A-Za-z\s,&\.]+)',
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text)
            if match:
                case_name = match.group(1).strip()
                if len(case_name) > 10:  # Filter out very short matches
                    return case_name
        return None
    
    def _extract_date_from_text(self, text: str) -> Optional[str]:
        """Extract date from search engine text."""
        year_match = re.search(r'\b(19|20)\d{2}\b', text)
        if year_match:
            return year_match.group(0)
        return None
    
    def _extract_court_from_text(self, text: str) -> Optional[str]:
        """Extract court information from search engine text."""
        court_patterns = [
            r'(Supreme\s+Court)',
            r'(Court\s+of\s+Appeals)',
            r'(District\s+Court)',
            r'(Circuit\s+Court)',
        ]
        
        for pattern in court_patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                return match.group(1)
        return None 