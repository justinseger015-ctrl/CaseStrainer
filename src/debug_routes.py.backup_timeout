"""
Debug routes for CaseStrainer application
This module provides endpoints to help diagnose issues in production.
"""
import os
import logging
import traceback
from flask import Blueprint, jsonify, current_app
from pathlib import Path
from typing import List, Dict, Any

debug_bp = Blueprint('debug', __name__, url_prefix='/casestrainer/api/debug')

def get_registered_routes() -> List[Dict[str, Any]]:
    """Get all registered routes in the Flask application"""
    routes = []
    for rule in current_app.url_map.iter_rules():
        if 'static' in rule.endpoint:
            continue
        
        methods = rule.methods or set()
        filtered_methods = sorted(methods - {'OPTIONS', 'HEAD'})
        
        routes.append({
            'endpoint': rule.endpoint,
            'methods': filtered_methods,
            'path': str(rule),
            'is_route': 'static' not in rule.endpoint
        })
    return routes

@debug_bp.route('/logs', methods=['GET'])
def get_logs():
    """
    Get the most recent application logs
    """
    try:
        log_dir = Path(__file__).parent.parent / 'logs'
        log_file = log_dir / 'casestrainer.log'
        
        if not log_file.exists():
            return jsonify({
                'error': 'Log file not found',
                'log_dir': str(log_dir),
                'files': [f.name for f in log_dir.glob('*')] if log_dir.exists() else 'Log directory not found'
            }), 404
        
        with open(log_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            last_lines = lines[-100:] if len(lines) > 100 else lines
        
        return jsonify({
            'status': 'success',
            'log_file': str(log_file),
            'log_entries': last_lines
        })
    except Exception as e:
        return jsonify({
            'error': str(e),
            'type': type(e).__name__,
            'cwd': str(Path.cwd()),
            'log_dir': str(Path(__file__).parent.parent / 'logs')
        }), 500

@debug_bp.route('/routes', methods=['GET'])
def list_routes():
    """List all registered routes in the application"""
    try:
        return jsonify({
            'status': 'success',
            'routes': get_registered_routes()
        })
    except Exception as e:
        return jsonify({
            'status': 'error',
            'error': str(e),
            'traceback': traceback.format_exc()
        }), 500

@debug_bp.route('/env', methods=['GET'])
def get_environment():
    """
    Get environment information
    """
    try:
        import sys
        import platform
        
        return jsonify({
            'status': 'success',
            'python_version': sys.version,
            'platform': platform.platform(),
            'environment': dict(os.environ),
            'working_directory': os.getcwd(),
            'files_in_working_dir': os.listdir('.'),
            'debug_mode': current_app.debug,
            'config': {k: str(v) for k, v in current_app.config.items() 
                     if not k.startswith(('SECRET', 'KEY', 'PASS', 'TOKEN'))}
        })
    except Exception as e:
        return jsonify({
            'status': 'error',
            'error': str(e),
            'traceback': traceback.format_exc()
        }), 500
