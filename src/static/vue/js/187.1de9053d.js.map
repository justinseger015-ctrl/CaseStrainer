{"version":3,"file":"js/187.1de9053d.js","mappings":"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","sources":["webpack://casestrainer-vue/./src/views/EnhancedValidator.vue","webpack://casestrainer-vue/./src/views/EnhancedValidator.vue?02fd"],"sourcesContent":["<template>\r\n  <div class=\"enhanced-validator\">\r\n    <h2>Enhanced Citation Validator</h2>\r\n    <p class=\"lead\">\r\n      This advanced tool validates legal citations using multiple sources and provides detailed citation information, context, and correction suggestions.\r\n    </p>\r\n    \r\n    <!-- Nav tabs for different validation methods -->\r\n    <ul class=\"nav nav-tabs\" id=\"validationTabs\" role=\"tablist\">\r\n      <li class=\"nav-item\" role=\"presentation\">\r\n        <button class=\"nav-link\" :class=\"{ active: activeTab === 'single' }\" @click=\"activeTab = 'single'\" type=\"button\">\r\n          Single Citation\r\n        </button>\r\n      </li>\r\n      <li class=\"nav-item\" role=\"presentation\">\r\n        <button class=\"nav-link\" :class=\"{ active: activeTab === 'document' }\" @click=\"activeTab = 'document'\" type=\"button\">\r\n          Upload Document\r\n        </button>\r\n      </li>\r\n      <li class=\"nav-item\" role=\"presentation\">\r\n        <button class=\"nav-link\" :class=\"{ active: activeTab === 'text' }\" @click=\"activeTab = 'text'\" type=\"button\">\r\n          Paste Text\r\n        </button>\r\n      </li>\r\n      <li class=\"nav-item\" role=\"presentation\">\r\n        <button class=\"nav-link\" :class=\"{ active: activeTab === 'url' }\" @click=\"activeTab = 'url'\" type=\"button\">\r\n          URL Check\r\n        </button>\r\n      </li>\r\n    </ul>\r\n    <!-- Tab content -->\r\n    <div class=\"tab-content\" id=\"validationTabsContent\">\r\n      <!-- URL Check Tab -->\r\n      <div v-show=\"activeTab === 'url'\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header bg-primary text-white\">\r\n            <h5 class=\"mb-0\">Check Citations from URL</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <!-- Error Alert for URL Analysis -->\r\n            <div v-if=\"urlAnalysisResult && urlAnalysisResult.error\" class=\"alert alert-danger mt-4\">\r\n              <strong>Error:</strong> {{ urlAnalysisResult.error }}\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"url-input\">Paste a URL to a legal document:</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"url-input\"\r\n                class=\"form-control\"\r\n                v-model=\"urlInput\"\r\n                placeholder=\"https://example.com/legal-document\"\r\n                @keyup.enter=\"analyzeUrl\"\r\n              />\r\n            </div>\r\n            <button\r\n              class=\"btn btn-primary mt-3\"\r\n              @click=\"analyzeUrl\"\r\n              :disabled=\"isAnalyzingUrl || !urlInput\"\r\n            >\r\n              <span v-if=\"isAnalyzingUrl\" class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n              Analyze URL\r\n            </button>\r\n            <!-- URL Analysis Results -->\r\n            <div v-if=\"urlAnalysisResult && transformedUrlResults\">\r\n              <ReusableResults :results=\"transformedUrlResults\" />\r\n            </div>\r\n            <div v-else-if=\"urlAnalysisResult && (!transformedUrlResults || !Array.isArray(transformedUrlResults.citations))\">\r\n              <div class=\"alert alert-danger mt-4\">\r\n                Unable to display citation results. The server returned invalid or incomplete data.\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Single Citation Tab -->\r\n      <div v-show=\"activeTab === 'single'\">\r\n      \r\n        <div class=\"card\">\r\n          <div class=\"card-header bg-primary text-white\">\r\n            <h5 class=\"mb-0\">Validate Citation</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n        <div class=\"form-group\">\r\n          <label for=\"citation-input\">Enter Citation:</label>\r\n          <div class=\"input-group\">\r\n            <input\r\n              type=\"text\"\r\n              id=\"citation-input\"\r\n              class=\"form-control\"\r\n              v-model=\"citationText\"\r\n              placeholder=\"e.g., 410 U.S. 113\"\r\n              @keyup.enter=\"validateCitation\"\r\n            />\r\n            <div class=\"input-group-append\">\r\n              <button\r\n                class=\"btn btn-primary\"\r\n                @click=\"validateCitation\"\r\n                :disabled=\"isValidating\"\r\n              >\r\n                <span v-if=\"isValidating\" class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                Validate\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Validation Methods -->\r\n        <div class=\"validation-methods mt-3\" v-if=\"!isValidating\">\r\n          <div class=\"form-check form-check-inline\">\r\n            <input class=\"form-check-input\" type=\"checkbox\" id=\"use-enhanced\" v-model=\"useEnhanced\" checked>\r\n            <label class=\"form-check-label\" for=\"use-enhanced\">Enhanced Validation</label>\r\n          </div>\r\n          <div class=\"form-check form-check-inline\">\r\n            <input class=\"form-check-input\" type=\"checkbox\" id=\"use-ml\" v-model=\"useML\" checked>\r\n            <label class=\"form-check-label\" for=\"use-ml\">ML Classifier</label>\r\n          </div>\r\n          <div class=\"form-check form-check-inline\">\r\n            <input class=\"form-check-input\" type=\"checkbox\" id=\"use-correction\" v-model=\"useCorrection\" checked>\r\n            <label class=\"form-check-label\" for=\"use-correction\">Suggest Corrections</label>\r\n          </div>\r\n        </div>\r\n\r\n            <!-- Validation Results -->\r\n            <div class=\"validation-results mt-4\" v-if=\"validationResult\">\r\n              <div v-if=\"!transformedValidationResult\" class=\"alert alert-info\">\r\n                <i class=\"fas fa-spinner fa-spin me-2\"></i> Processing results...\r\n              </div>\r\n              <CitationResults \r\n                v-else \r\n                :results=\"transformedValidationResult\"\r\n                :key=\"'citation-results-' + (validationResult.citation || 'none')\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Document Upload Tab -->\r\n      <!-- Error Alert for Document Upload -->\r\n      <div v-if=\"documentAnalysisResult && documentAnalysisResult.error\" class=\"alert alert-danger mt-4\">\r\n        <strong>Error:</strong> {{ documentAnalysisResult.error }}\r\n      </div>\r\n      <EnhancedFileUpload v-show=\"activeTab === 'document'\" />\r\n      \r\n      <!-- Text Paste Tab -->\r\n      <!-- Error Alert for Text Paste -->\r\n      <div v-if=\"textAnalysisResult && textAnalysisResult.error\" class=\"alert alert-danger mt-4\">\r\n        <strong>Error:</strong> {{ textAnalysisResult.error }}\r\n      </div>\r\n      <EnhancedTextPaste v-show=\"activeTab === 'text'\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getCurrentInstance } from 'vue';\r\nimport axios from 'axios';\r\nimport EnhancedFileUpload from '../components/EnhancedFileUpload.vue';\r\n\r\n// Get the current app instance for logging\r\nconst currentApp = getCurrentInstance()?.appContext?.app;\r\nimport EnhancedTextPaste from '../components/EnhancedTextPaste.vue';\r\nimport CitationResults from '@/components/CitationResults.vue';\r\nimport ReusableResults from '@/components/ReusableResults.vue';\r\n\r\nexport default {\r\n  name: 'EnhancedValidator',\r\n  components: {\r\n    CitationResults,\r\n    EnhancedFileUpload,\r\n    EnhancedTextPaste,\r\n    ReusableResults\r\n  },\r\n  data() {\r\n    return {\r\n      activeTab: 'single',\r\n      // Single citation validation\r\n      citationText: '',\r\n      isValidating: false,\r\n      validationResult: null,\r\n      mlResult: null,\r\n      correctionResult: null,\r\n      citationContext: '',\r\n      fileLink: '',\r\n      useEnhanced: true,\r\n      useML: true,\r\n      useCorrection: true,\r\n      contextResult: null,\r\n      \r\n      // Document upload\r\n      isAnalyzing: false,\r\n      documentAnalysisResult: null,\r\n      \r\n      // Text paste\r\n      pastedText: '',\r\n      textAnalysisResult: null,\r\n      // URL check\r\n      urlInput: '',\r\n      isAnalyzingUrl: false,\r\n      urlAnalysisResult: {\r\n  citations: [],\r\n  metadata: {},\r\n  error: null\r\n}\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    formattedContext() {\r\n      if (!this.contextResult || !this.contextResult.context) {\r\n        return '';\r\n      }\r\n      \r\n      // Split the context into paragraphs\r\n      const paragraphs = this.contextResult.context.split('\\n\\n');\r\n      \r\n      // Format each paragraph\r\n      return paragraphs.map(p => {\r\n        // Highlight the citation\r\n        if (this.citationText && p.includes(this.citationText)) {\r\n          return p.replace(new RegExp(this.citationText, 'g'), `<mark>${this.citationText}</mark>`);\r\n        }\r\n        return p;\r\n      }).join('<br><br>');\r\n    },\r\n    basePath() {\r\n      // Determine the base path for API calls\r\n      // Try multiple paths to ensure compatibility\r\n      const paths = [\r\n        '/casestrainer/api'\r\n      ];\r\n      \r\n      // Always use /casestrainer/api in production and as a default\r\n      return '/casestrainer/api';\r\n    },\r\n    // Transform single citation validation result into the format expected by CitationResults\r\n    transformedValidationResult() {\r\n      // Return a properly structured empty result if no validation result\r\n      if (!this.validationResult) {\r\n        return this.getEmptyResultsObject();\r\n      }\r\n      \r\n      try {\r\n        console.log('[EnhancedValidator] Starting transformation of validation result');\r\n        const validation = this.validationResult || {};\r\n        \r\n        // Transform single validation result to match CitationResults expected format\r\n        const isCourtListener = (validation.source === 'courtlistener') || \r\n                             String(validation.verified_by || '').toLowerCase().includes('courtlistener');\r\n        \r\n        // Safely get citation text with fallbacks\r\n        const citationText = validation.citation || this.citationText || 'Unknown';\r\n        \r\n        // Create the citation object with all required fields for CitationResults\r\n        const citation = {\r\n          id: `citation-${Date.now()}`,\r\n          citation: citationText,\r\n          citation_text: validation.citation_text || citationText,\r\n          case_name: validation.case_name || citationText,\r\n          verified: !!validation.verified,\r\n          status: validation.verified ? 'verified' : 'unverified',\r\n          validation_method: validation.validation_method || (isCourtListener ? 'CourtListener' : 'Local Validation'),\r\n          confidence: parseFloat(validation.confidence) || 0.0,\r\n          source: validation.source || 'unknown',\r\n          verified_by: validation.verified_by || (isCourtListener ? 'CourtListener' : 'Local'),\r\n          contexts: Array.isArray(validation.contexts) ? validation.contexts : [],\r\n          context: (Array.isArray(validation.contexts) && validation.contexts[0]?.text) ? \r\n                  validation.contexts[0].text : '',\r\n          details: validation.details || {},\r\n          metadata: {\r\n            ...(validation.metadata || {}),\r\n            url: validation.details?.url || validation.url || '',\r\n            source: validation.source || 'unknown',\r\n            verified: !!validation.verified,\r\n            timestamp: validation.timestamp || new Date().toISOString()\r\n          },\r\n          url: validation.details?.url || validation.url || '',\r\n          error: validation.error || null,\r\n          verification_steps: Array.isArray(validation.verification_steps) ? validation.verification_steps : [],\r\n          sources: validation.sources || {}\r\n        };\r\n        \r\n        // Count verified vs unverified\r\n        const verifiedCount = citation.verified ? 1 : 0;\r\n        const unverifiedCount = citation.verified ? 0 : 1;\r\n        \r\n        // Return results in the format expected by CitationResults\r\n        const result = {\r\n          validation_results: [{\r\n            ...citation,\r\n            // Ensure required fields for CitationResults\r\n            status: citation.verified ? 'verified' : 'unverified',\r\n            source: citation.source || 'unknown',\r\n            verified: !!citation.verified,\r\n            metadata: {\r\n              ...(citation.metadata || {}),\r\n              url: citation.url || '',\r\n              source: citation.source || 'unknown',\r\n              verified: !!citation.verified,\r\n              timestamp: citation.timestamp || new Date().toISOString()\r\n            }\r\n          }],\r\n          citations: [{\r\n            ...citation,\r\n            // Ensure required fields for CitationResults\r\n            status: citation.verified ? 'verified' : 'unverified',\r\n            source: citation.source || 'unknown',\r\n            verified: !!citation.verified,\r\n            metadata: {\r\n              ...(citation.metadata || {}),\r\n              url: citation.url || '',\r\n              source: citation.source || 'unknown',\r\n              verified: !!citation.verified,\r\n              timestamp: citation.timestamp || new Date().toISOString()\r\n            }\r\n          }],\r\n          total_citations: 1,\r\n          verified_count: verifiedCount,\r\n          unverified_count: unverifiedCount,\r\n          status: 'completed',\r\n          execution_time: 0,\r\n          // Add any additional metadata that might be expected\r\n          metadata: {\r\n            ...(citation.metadata || {}),\r\n            timestamp: citation.timestamp || new Date().toISOString()\r\n          }\r\n        };\r\n        \r\n        console.log('[EnhancedValidator] Transformed validation result:', result);\r\n        return result;\r\n      } catch (error) {\r\n        console.error('[EnhancedValidator] Error transforming validation result:', error);\r\n        return this.getEmptyResultsObject();\r\n      }\r\n    },\r\n    \r\n\r\n    \r\n    // Document analysis results transformation\r\n    transformedDocumentResults() {\r\n      if (!this.documentAnalysisResult) {\r\n        return this.getEmptyResultsObject();\r\n      }\r\n      \r\n      try {\r\n        console.log('[EnhancedValidator] Transforming document analysis results');\r\n        const analysis = this.documentAnalysisResult || {};\r\n        const citations = Array.isArray(analysis.citations) ? analysis.citations : [];\r\n        \r\n        // Transform document analysis results to match CitationResults expected format\r\n        return {\r\n          ...this.getEmptyResultsObject(),\r\n          validation_results: citations,\r\n          citations: citations,\r\n          metadata: analysis.metadata || {},\r\n          status: analysis.status || 'completed',\r\n          execution_time: analysis.execution_time || 0,\r\n          verified_count: analysis.verified_count || 0,\r\n          unverified_count: analysis.unverified_count || 0\r\n        };\r\n      } catch (error) {\r\n        console.error('[EnhancedValidator] Error transforming document results:', error);\r\n        return this.getEmptyResultsObject();\r\n      }\r\n    },\r\n\r\n    // Transform text analysis results\r\n    transformedTextResults() {\r\n      if (!this.textAnalysisResult) return { \r\n        citations: [], \r\n        validation_results: [],\r\n        confirmedCount: 0,\r\n        totalCitations: 0,\r\n        confirmed_count: 0,\r\n        citations_count: 0,\r\n        metadata: {}\r\n      };\r\n      \r\n      // Process citations from the text analysis result\r\n      const citations = (this.textAnalysisResult.citations || [])\r\n        .filter(citation => citation && typeof citation === 'object')\r\n        .map(citation => ({\r\n          ...citation,\r\n          id: citation.id || `text-${Date.now()}-${Math.random().toString(36).substr(2, 6)}`,\r\n          citation: citation.citation || citation.citation_text || 'Unknown',\r\n          case_name: citation.case_name || citation.citation || 'Unknown Case',\r\n          verified: !!citation.verified,\r\n          validation_method: citation.validation_method || 'Text Analysis',\r\n          confidence: citation.confidence || 0.0,\r\n          contexts: Array.isArray(citation.contexts) ? citation.contexts : [],\r\n          details: citation.details || {},\r\n          error: citation.error || null\r\n        }));\r\n      \r\n      const confirmedCount = citations.filter(c => c.verified).length;\r\n      const totalCitations = citations.length;\r\n      \r\n      return {\r\n        citations,\r\n        validation_results: citations,\r\n        confirmedCount,\r\n        totalCitations,\r\n        confirmed_count: confirmedCount,\r\n        citations_count: totalCitations,\r\n        metadata: this.textAnalysisResult.metadata || {},\r\n        error: this.textAnalysisResult.error || null\r\n      };\r\n    },\r\n    // Transform URL analysis results\r\n    transformedUrlResults() {\r\n      if (!this.urlAnalysisResult || typeof this.urlAnalysisResult !== 'object') {\r\n        return { \r\n          citations: [], \r\n          validation_results: [],\r\n          confirmedCount: 0,\r\n          totalCitations: 0,\r\n          confirmed_count: 0,\r\n          citations_count: 0,\r\n          metadata: {},\r\n          unverifiedCount: 0,\r\n          unconfirmed_count: 0\r\n        };\r\n      }\r\n      \r\n      console.log('Original URL analysis result:', JSON.parse(JSON.stringify(this.urlAnalysisResult)));\r\n      \r\n      // Process citations from the URL analysis result\r\n      const citations = (Array.isArray(this.urlAnalysisResult.citations) ? this.urlAnalysisResult.citations : [])\r\n        .filter(citation => citation && typeof citation === 'object')\r\n        .map(citation => ({\r\n          ...citation,\r\n          id: citation.id || `url-${Date.now()}-${Math.random().toString(36).substr(2, 6)}`,\r\n          citation: citation.citation || citation.citation_text || 'Unknown',\r\n          case_name: citation.case_name || citation.citation || 'Unknown Case',\r\n          verified: !!citation.verified,\r\n          status: citation.verified ? 'verified' : 'unverified',\r\n          validation_method: citation.validation_method || 'URL Analysis',\r\n          confidence: citation.confidence || 0.0,\r\n          contexts: Array.isArray(citation.contexts) ? citation.contexts : [],\r\n          details: citation.details || {},\r\n          error: citation.error || null,\r\n          source: citation.source || 'URL Analysis',\r\n          verified_by: citation.verified_by || (citation.verified ? 'URL Analysis' : 'Not Verified'),\r\n          metadata: citation.metadata || {}\r\n        }));\r\n      \r\n      const confirmedCount = citations.filter(c => c.verified).length;\r\n      const totalCitations = citations.length;\r\n      const unverifiedCount = totalCitations - confirmedCount;\r\n      \r\n      const result = {\r\n        citations,\r\n        validation_results: citations,\r\n        confirmedCount,\r\n        totalCitations,\r\n        confirmed_count: confirmedCount,\r\n        citations_count: totalCitations,\r\n        unverifiedCount,\r\n        unconfirmed_count: unverifiedCount,\r\n        metadata: this.urlAnalysisResult.metadata || {},\r\n        error: this.urlAnalysisResult.error || null\r\n      };\r\n      \r\n      console.log('Transformed URL results:', JSON.parse(JSON.stringify(result)));\r\n      return result;\r\n    },\r\n  },\r\n  methods: {\r\n    /**\r\n     * Returns an empty results object with the correct structure\r\n     * @returns {Object} Empty results object with all required fields\r\n     */\r\n    /**\r\n     * Returns an empty results object with the correct structure\r\n     * @returns {Object} Empty results object with all required fields\r\n     */\r\n    getEmptyResultsObject() {\r\n      const emptyResult = {\r\n        validation_results: [],\r\n        citations: [],\r\n        total_citations: 0,\r\n        verified_count: 0,\r\n        unverified_count: 0,\r\n        status: 'completed',\r\n        execution_time: 0,\r\n        metadata: {\r\n          timestamp: new Date().toISOString(),\r\n          source: 'none',\r\n          verified: false\r\n        }\r\n      };\r\n      \r\n      console.log('[EnhancedValidator] Returning empty results object:', emptyResult);\r\n      return emptyResult;\r\n    },\r\n    \r\n    /**\r\n     * Transforms the API response to match the CitationResults component's expected format\r\n     * @param {Object} apiResponse - The raw API response\r\n     * @returns {Object} Transformed results object\r\n     */\r\n    transformApiResponse(apiResponse) {\r\n      try {\r\n        console.log('[EnhancedValidator] Transforming API response for CitationResults');\r\n        \r\n        if (!apiResponse || !apiResponse.validation_results) {\r\n          console.warn('[EnhancedValidator] No validation_results in API response');\r\n          return this.getEmptyResultsObject();\r\n        }\r\n        \r\n        const transformedResults = {\r\n          validation_results: [],\r\n          total_citations: 0,\r\n          verified_count: 0,\r\n          unverified_count: 0,\r\n          metadata: {}\r\n        };\r\n        \r\n        // Process each validation result\r\n        apiResponse.validation_results.forEach((result, index) => {\r\n          const validation = result.validation || result;\r\n          const isCourtListener = (validation.source === 'courtlistener') || \r\n                               String(validation.verified_by || '').toLowerCase().includes('courtlistener');\r\n          \r\n          // Safely get citation text with fallbacks\r\n          const citationText = validation.citation || this.citationText || 'Unknown';\r\n          \r\n          // Create the citation object with all required fields for CitationResults\r\n          const citation = {\r\n            id: `citation-${Date.now()}-${index}`,\r\n            citation: citationText,\r\n            citation_text: validation.citation_text || citationText,\r\n            // Try to get case name from multiple possible locations in the response\r\n            case_name: validation.case_name || \r\n                      validation.details?.case_name || \r\n                      validation.metadata?.case_name || \r\n                      (validation.details?.title ? validation.details.title.replace(/<[^>]+>/g, '') : null) ||\r\n                      (validation.contexts?.[0]?.case_name ? validation.contexts[0].case_name : null) ||\r\n                      'Unknown Case',\r\n            verified: !!validation.verified,\r\n            status: validation.verified ? 'verified' : 'unverified',\r\n            validation_method: validation.validation_method || (isCourtListener ? 'CourtListener' : 'Local Validation'),\r\n            confidence: parseFloat(validation.confidence) || 0.0,\r\n            source: validation.source || 'unknown',\r\n            verified_by: validation.verified_by || (isCourtListener ? 'CourtListener' : 'Local'),\r\n            contexts: Array.isArray(validation.contexts) ? validation.contexts : [],\r\n            context: (Array.isArray(validation.contexts) && validation.contexts[0]?.text) ? \r\n                    validation.contexts[0].text : '',\r\n            details: validation.details || {},\r\n            metadata: {\r\n              ...(validation.metadata || {}),\r\n              url: validation.details?.url || validation.url || '',\r\n              source: validation.source || 'unknown',\r\n              verified: !!validation.verified,\r\n              timestamp: validation.timestamp || new Date().toISOString()\r\n            },\r\n            url: validation.details?.url || validation.url || '',\r\n            error: validation.error || null,\r\n            verification_steps: Array.isArray(validation.verification_steps) ? validation.verification_steps : [],\r\n            sources: validation.sources || {}\r\n          };\r\n          \r\n          // Ensure case_name is properly formatted\r\n          if (citation.case_name) {\r\n            // Clean up any HTML tags and extra whitespace\r\n            citation.case_name = citation.case_name\r\n              .replace(/<[^>]+>/g, '') // Remove HTML tags\r\n              .replace(/\\s+/g, ' ')    // Replace multiple spaces with single space\r\n              .trim();\r\n            \r\n            // If case_name is just a citation number, mark as unknown\r\n            if (/^\\d+\\s+[A-Za-z0-9.]+\\s+\\d+$/.test(citation.case_name)) {\r\n              citation.case_name = 'Unknown Case';\r\n            }\r\n          }\r\n          \r\n          // Update counts\r\n          if (citation.verified) {\r\n            transformedResults.verified_count++;\r\n          } else {\r\n            transformedResults.unverified_count++;\r\n          }\r\n          \r\n          transformedResults.validation_results.push(citation);\r\n        });\r\n        \r\n        // Set total citations count\r\n        transformedResults.total_citations = transformedResults.validation_results.length;\r\n        \r\n        console.log('[EnhancedValidator] Transformed results:', transformedResults);\r\n        return transformedResults;\r\n        \r\n      } catch (error) {\r\n        console.error('[EnhancedValidator] Error transforming API response:', error);\r\n        return this.getEmptyResultsObject();\r\n      }\r\n    },\r\n    \r\n    async analyzeUrl() {\r\n      if (!this.urlInput) {\r\n        this.urlAnalysisResult = {\r\n          error: 'No URL provided',\r\n          details: 'Please enter a URL to analyze',\r\n          status: 400,\r\n          citations: [],\r\n          metadata: {},\r\n          eyecite_processed: false\r\n        };\r\n        return;\r\n      }\r\n      \r\n      // Basic URL validation\r\n      try {\r\n        new URL(this.urlInput);\r\n      } catch (e) {\r\n        this.urlAnalysisResult = {\r\n          error: 'Invalid URL',\r\n          details: 'Please enter a valid URL (e.g., https://example.com)',\r\n          status: 400,\r\n          citations: [],\r\n          metadata: {},\r\n          eyecite_processed: false\r\n        };\r\n        return;\r\n      }\r\n      \r\n      this.isAnalyzingUrl = true;\r\n      this.urlAnalysisResult = { \r\n        citations: [], \r\n        metadata: {}, \r\n        eyecite_processed: false, \r\n        error: null \r\n      };\r\n\r\n      try {\r\n        const response = await axios.post('/casestrainer/api/analyze', \r\n          { url: this.urlInput },\r\n          {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'X-Requested-With': 'XMLHttpRequest'\r\n            },\r\n            timeout: 300000 // 5 minutes timeout\r\n          }\r\n        );\r\n        \r\n        if (response && response.data && typeof response.data === 'object') {\r\n          const processedCitations = Array.isArray(response.data.citations)\r\n            ? response.data.citations.map(citation => ({\r\n                ...citation,\r\n                id: citation.id || `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n                url: citation?.url || this.urlInput,\r\n                contexts: Array.isArray(citation.contexts) ? citation.contexts : [],\r\n                verified: citation.verified || false,\r\n                verification_status: citation.verification_status || \r\n                                  (citation.verified ? 'confirmed_by_courtlistener' : 'unverified'),\r\n                validation_method: citation.validation_method || 'url_analysis'\r\n              }))\r\n            : [];\r\n            \r\n          this.urlAnalysisResult = {\r\n            ...response.data,\r\n            citations: processedCitations,\r\n            validation_results: processedCitations,\r\n            metadata: {\r\n              ...(response.data.metadata || {}),\r\n              url: this.urlInput,\r\n              processedAt: new Date().toISOString(),\r\n              citationCount: processedCitations.length\r\n            },\r\n            eyecite_processed: response.data.eyecite_processed || false,\r\n            error: response.data.error || null\r\n          };\r\n        } else {\r\n          throw new Error('Invalid response format from server');\r\n        }\r\n      } catch (error) {\r\n        console.error('URL analysis error:', error);\r\n        const errorResponse = error.response || {};\r\n        this.urlAnalysisResult = {\r\n          error: errorResponse.data?.message || error.message || 'Failed to analyze URL',\r\n          details: errorResponse.data?.details || errorResponse.statusText || 'An error occurred while analyzing the URL',\r\n          status: errorResponse.status || 500,\r\n          code: error.code,\r\n          citations: [],\r\n          metadata: {\r\n            url: this.urlInput,\r\n            processedAt: new Date().toISOString()\r\n          },\r\n          eyecite_processed: false\r\n        };\r\n      } finally {\r\n        this.isAnalyzingUrl = false;\r\n      }\r\n    },\r\n    async validateCitation() {\r\n      // Input validation and store citation in local constant\r\n      const citationToValidate = this.citationText?.trim() || '';\r\n      \r\n      if (!citationToValidate) {\r\n        this.validationResult = {\r\n          error: 'No citation provided',\r\n          details: 'Please enter a citation to validate',\r\n          status: 400,\r\n          verified: false,\r\n          citation: ''\r\n        };\r\n        this.$toast.warning('Please enter a citation to validate');\r\n        return;\r\n      }\r\n\r\n      this.isValidating = true;\r\n      this.validationResult = null;\r\n      this.mlResult = null;\r\n      this.correctionResult = null;\r\n      this.citationContext = '';\r\n      this.fileLink = '';\r\n      \r\n      try {\r\n        // Enhanced validation\r\n        if (this.useEnhanced) {\r\n          console.log('[EnhancedValidator] Sending request to validate citation:', citationToValidate);\r\n          const response = await axios.post(\r\n            '/casestrainer/api/analyze',\r\n            { text: citationToValidate },\r\n            {\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n                'X-Requested-With': 'XMLHttpRequest',\r\n                'Accept': 'application/json'\r\n              },\r\n              timeout: 300000 // 5 minutes timeout\r\n            }\r\n          );\r\n          \r\n          if (response?.data) {\r\n            console.log('[EnhancedValidator] Received API response:', response.data);\r\n            \r\n            // Check if we have validation results in the expected format\r\n            if (response.data.validation_results?.length > 0) {\r\n              // Transform the response to match CitationResults expected format\r\n              const transformedResults = this.transformApiResponse(response.data);\r\n              \r\n              // Log the transformed results for debugging\r\n              console.log('[EnhancedValidator] Transformed results for CitationResults:', transformedResults);\r\n              \r\n              // Update the validation result with the transformed data\r\n              this.validationResult = transformedResults.validation_results[0];\r\n              \r\n              // Log successful validation\r\n              console.log('[EnhancedValidator] Processed validation result:', this.validationResult);\r\n              \r\n              // Get context if verified\r\n              if (this.validationResult.verified) {\r\n                await this.getCitationContext();\r\n              }\r\n            } else if (response.data.error) {\r\n              // Handle API-level errors\r\n              console.error('[EnhancedValidator] API returned error:', response.data.error);\r\n              this.validationResult = {\r\n                error: response.data.error,\r\n                details: response.data.message || 'Failed to validate citation',\r\n                status: response.status || 500,\r\n                citation: citationToValidate,\r\n                verified: false,\r\n                source: 'api_error',\r\n                metadata: {\r\n                  error: response.data.error,\r\n                  status: response.status || 500,\r\n                  timestamp: new Date().toISOString()\r\n                }\r\n              };\r\n              \r\n              currentApp.logger.error('API Error:', this.validationResult);\r\n            } else {\r\n              // Handle empty or unexpected response format\r\n              this.validationResult = {\r\n                error: 'No validation results',\r\n                details: 'The citation could not be validated. The response format was unexpected.',\r\n                status: 404,\r\n                citation: citationToValidate,\r\n                verified: false,\r\n                source: 'validation_error',\r\n                metadata: {\r\n                  response_data: response.data,\r\n                  timestamp: new Date().toISOString()\r\n                }\r\n              };\r\n              \r\n              currentApp.logger.warn('Unexpected API response format:', response.data);\r\n            }\r\n          }\r\n        }\r\n        \r\n        // ML classification (if enabled)\r\n        if (this.useML) {\r\n          try {\r\n            const mlResponse = await axios.post(\r\n              '/casestrainer/api/classify-citation',\r\n              { citation: citationToValidate },\r\n              {\r\n                headers: { 'Content-Type': 'application/json' },\r\n                timeout: 30000 // 30 seconds timeout\r\n              }\r\n            );\r\n            if (mlResponse?.data) {\r\n              this.mlResult = {\r\n                ...mlResponse.data,\r\n                processed_at: new Date().toISOString()\r\n              };\r\n            }\r\n          } catch (mlError) {\r\n            console.warn('ML classification failed:', mlError);\r\n            // Non-fatal error, continue with other operations\r\n          }\r\n        }\r\n        \r\n        // Correction suggestions (if enabled)\r\n        if (this.useCorrection) {\r\n          try {\r\n            const correctionResponse = await axios.post(\r\n              '/casestrainer/api/suggest-citation-corrections',\r\n              { citation: citationToValidate },\r\n              {\r\n                headers: { 'Content-Type': 'application/json' },\r\n                timeout: 30000 // 30 seconds timeout\r\n              }\r\n            );\r\n            \r\n            if (correctionResponse?.data) {\r\n              // Only set correction result if we have suggestions or an error\r\n              if (correctionResponse.data.suggestions?.length > 0 || correctionResponse.data.error) {\r\n                this.correctionResult = {\r\n                  ...correctionResponse.data,\r\n                  processed_at: new Date().toISOString()\r\n                };\r\n              } else if (correctionResponse.data.warning) {\r\n                // Show warning to the user if the correction engine is not available\r\n                this.$toast.warning(correctionResponse.data.warning, {\r\n                  position: 'top-right',\r\n                  timeout: 8000,\r\n                  closeOnClick: true,\r\n                  pauseOnFocusLoss: true,\r\n                  pauseOnHover: true\r\n                });\r\n              }\r\n            }\r\n          } catch (corrError) {\r\n            console.warn('Correction suggestion failed:', corrError);\r\n            // Show error to the user\r\n            this.$toast.error('Failed to get correction suggestions. ' + (corrError.response?.data?.error || corrError.message || ''), {\r\n              position: 'top-right',\r\n              timeout: 10000,\r\n              closeOnClick: true,\r\n              pauseOnFocusLoss: true,\r\n              pauseOnHover: true\r\n            });\r\n            // Non-fatal error, continue with other operations\r\n          }\r\n        }\r\n        \r\n      } catch (error) {\r\n        console.error('Citation validation error:', error);\r\n        const errorResponse = error.response || {};\r\n        this.validationResult = {\r\n          error: errorResponse.data?.message || error.message || 'Failed to validate citation',\r\n          details: errorResponse.data?.details || errorResponse.statusText || 'An unexpected error occurred',\r\n          status: errorResponse.status || 500,\r\n          code: error.code,\r\n          citation: citationToValidate,\r\n          verified: false,\r\n          processed_at: new Date().toISOString()\r\n        };\r\n      } finally {\r\n        this.isValidating = false;\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * Fetches additional context for a validated citation\r\n     * @returns {Promise<void>}\r\n     */\r\n    async getCitationContext() {\r\n      if (!this.validationResult?.verified) {\r\n        console.warn('Cannot get context for unverified citation');\r\n        return;\r\n      }\r\n      \r\n      const citationText = this.citationText?.trim();\r\n      if (!citationText) {\r\n        console.warn('No citation text available for context lookup');\r\n        return;\r\n      }\r\n      \r\n      // Prepare the request data\r\n      const requestData = {\r\n        citation: citationText,\r\n        case_name: this.validationResult.case_name,\r\n        citation_id: this.validationResult.id || null,\r\n        source: this.validationResult.source || 'unknown'\r\n      };\r\n      \r\n      // Configure request options\r\n      const requestOptions = {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-Requested-With': 'XMLHttpRequest'\r\n        },\r\n        timeout: 30000, // 30 seconds timeout\r\n        validateStatus: status => status >= 200 && status < 500\r\n      };\r\n      \r\n      try {\r\n        // Try endpoints in order of preference\r\n        const endpoints = [\r\n          '/casestrainer/api/citation-context',\r\n          '/api/citation-context',\r\n          `${this.basePath}/citation-context`\r\n        ];\r\n        \r\n        let lastError = null;\r\n        \r\n        for (const endpoint of endpoints) {\r\n          try {\r\n            // Build URL with query parameters\r\n            const params = new URLSearchParams({\r\n              citation: encodeURIComponent(citationText),\r\n              case_name: encodeURIComponent((this.validationResult?.case_name || ''))\r\n            });\r\n            const url = `${endpoint}?${params.toString()}`;\r\n            \r\n            // Use GET instead of POST\r\n            const response = await axios.get(url, requestOptions);\r\n            \r\n            // Process successful response\r\n            if (response.status === 200 && response.data) {\r\n              const responseData = response.data;\r\n              this.contextResult = responseData;\r\n              this.citationContext = responseData.context || '';\r\n              this.fileLink = responseData.file_link || '';\r\n              \r\n              // Update validation result with context metadata\r\n              if (this.validationResult) {\r\n                this.validationResult.context_available = true;\r\n                this.validationResult.context_retrieved_at = new Date().toISOString();\r\n                this.validationResult.context_source = responseData.source || endpoint;\r\n              }\r\n              \r\n              return; // Success, exit the loop\r\n            } else if (response.status === 404) {\r\n              // Endpoint not found, try next one\r\n              lastError = new Error('Context endpoint not found');\r\n              continue;\r\n            } else {\r\n              // Other error status, log and try next endpoint\r\n              lastError = new Error(response.data?.message || `HTTP ${response.status}`);\r\n              continue;\r\n            }\r\n          } catch (error) {\r\n            // Network or other error, log and try next endpoint\r\n            lastError = error;\r\n            console.warn(`Context lookup failed at ${endpoint}:`, error);\r\n          }\r\n        }\r\n        \r\n        // If we get here, all endpoints failed\r\n        console.error('All context endpoints failed:', lastError);\r\n        this.contextResult = {\r\n          error: 'Failed to retrieve citation context',\r\n          details: lastError?.message || 'All context endpoints failed',\r\n          status: lastError?.response?.status || 500,\r\n          citation: citationText,\r\n          timestamp: new Date().toISOString()\r\n        };\r\n        \r\n      } catch (error) {\r\n        // This should only catch unexpected errors in the retry logic\r\n        console.error('Unexpected error in getCitationContext:', error);\r\n        this.contextResult = {\r\n          error: 'Unexpected error retrieving context',\r\n          details: error.message || 'An unexpected error occurred',\r\n          status: error.response?.status || 500,\r\n          citation: citationText,\r\n          timestamp: new Date().toISOString()\r\n        };\r\n      } finally {\r\n        // Ensure any loading states are reset\r\n        if (this.validationResult) {\r\n          this.validationResult.context_retrieval_complete = true;\r\n        }\r\n      }\r\n    },\r\n    \r\n    applySuggestion(suggestion) {\r\n      this.citationText = suggestion;\r\n      this.validateCitation();\r\n    },\r\n    \r\n    getBadgeClass(validationMethod) {\r\n      // Return appropriate Bootstrap badge classes based on validation method\r\n      switch(validationMethod) {\r\n        case 'Landmark':\r\n          return 'bg-primary';\r\n        case 'CourtListener':\r\n          return 'bg-success';\r\n        case 'Multitool':\r\n          return 'bg-info';\r\n        case 'Other':\r\n          return 'bg-secondary';\r\n        default:\r\n          return 'bg-dark';\r\n      }\r\n    },\r\n    \r\n    async analyzeDocument() {\r\n      const fileInput = this.$refs.documentUpload;\r\n      if (!fileInput.files || fileInput.files.length === 0) {\r\n        this.documentAnalysisResult = {\r\n          error: 'No file selected',\r\n          details: 'Please select a file to upload',\r\n          status: 400\r\n        };\r\n        return;\r\n      }\r\n      \r\n      const file = fileInput.files[0];\r\n      this.isAnalyzing = true;\r\n      this.documentAnalysisResult = null;\r\n      \r\n      // Validate file type and size\r\n      const validTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];\r\n      const maxSize = 10 * 1024 * 1024; // 10MB\r\n      \r\n      if (!validTypes.includes(file.type)) {\r\n        this.documentAnalysisResult = {\r\n          error: 'Invalid file type',\r\n          details: 'Please upload a PDF or Word document',\r\n          status: 400\r\n        };\r\n        this.isAnalyzing = false;\r\n        return;\r\n      }\r\n      \r\n      if (file.size > maxSize) {\r\n        this.documentAnalysisResult = {\r\n          error: 'File too large',\r\n          details: 'Maximum file size is 10MB',\r\n          status: 400\r\n        };\r\n        this.isAnalyzing = false;\r\n        return;\r\n      }\r\n      \r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      \r\n      try {\r\n        const response = await axios.post('/casestrainer/api/analyze', formData, {\r\n          headers: { \r\n            'Content-Type': 'multipart/form-data',\r\n            'X-Requested-With': 'XMLHttpRequest'\r\n          },\r\n          timeout: 300000 // 5 minutes timeout\r\n        });\r\n        \r\n        // Process successful response\r\n        this.documentAnalysisResult = {\r\n          ...response.data,\r\n          metadata: {\r\n            ...response.data.metadata,\r\n            fileName: file.name,\r\n            fileSize: file.size,\r\n            fileType: file.type,\r\n            processedAt: new Date().toISOString()\r\n          },\r\n          error: response.data.error || null\r\n        };\r\n        \r\n      } catch (error) {\r\n        // Enhanced error handling\r\n        const errorResponse = error.response || {};\r\n        this.documentAnalysisResult = {\r\n          error: errorResponse.data?.message || error.message || 'Failed to process document',\r\n          details: errorResponse.data?.details || errorResponse.statusText,\r\n          status: errorResponse.status || 500,\r\n          code: error.code,\r\n          metadata: {\r\n            fileName: file.name,\r\n            fileSize: file.size,\r\n            fileType: file.type\r\n          }\r\n        };\r\n        console.error('Document analysis error:', error);\r\n      } finally {\r\n        this.isAnalyzing = false;\r\n      }\r\n    },\r\n    // Enhanced text analysis with better error handling and response processing\r\n    async analyzeText() {\r\n      if (!this.pastedText) {\r\n        this.textAnalysisResult = {\r\n          error: 'No text provided',\r\n          details: 'Please enter or paste some text to analyze',\r\n          status: 400\r\n        };\r\n        return;\r\n      }\r\n      \r\n      // Validate input length\r\n      if (this.pastedText.length > 10000) {\r\n        this.textAnalysisResult = {\r\n          error: 'Text too long',\r\n          details: 'Maximum text length is 10,000 characters',\r\n          status: 400\r\n        };\r\n        return;\r\n      }\r\n      \r\n      this.isAnalyzing = true;\r\n      this.textAnalysisResult = null;\r\n      \r\n      try {\r\n        const response = await axios.post('/casestrainer/api/analyze', \r\n          { text: this.pastedText },\r\n          {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'X-Requested-With': 'XMLHttpRequest'\r\n            },\r\n            timeout: 300000 // 5 minutes timeout\r\n          }\r\n        );\r\n        \r\n        // Process successful response\r\n        this.textAnalysisResult = {\r\n          ...response.data,\r\n          metadata: {\r\n            ...response.data.metadata,\r\n            textLength: this.pastedText.length,\r\n            processedAt: new Date().toISOString(),\r\n            citationCount: response.data.citations?.length || 0\r\n          },\r\n          error: response.data.error || null\r\n        };\r\n        \r\n      } catch (error) {\r\n        // Enhanced error handling\r\n        const errorResponse = error.response || {};\r\n        this.textAnalysisResult = {\r\n          error: errorResponse.data?.message || error.message || 'Failed to analyze text',\r\n          details: errorResponse.data?.details || errorResponse.statusText,\r\n          status: errorResponse.status || 500,\r\n          code: error.code,\r\n          metadata: {\r\n            textLength: this.pastedText.length,\r\n            processedAt: new Date().toISOString()\r\n          }\r\n        };\r\n        console.error('Text analysis error:', error);\r\n      } finally {\r\n        this.isAnalyzing = false;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.enhanced-validator {\r\n  margin-bottom: 2rem;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.highlight-citation {\r\n  background-color: #fffacd;\r\n  font-weight: bold;\r\n  padding: 2px;\r\n  border-radius: 3px;\r\n}\r\n\r\n.context-text {\r\n  font-family: Georgia, serif;\r\n  line-height: 1.6;\r\n  background-color: #f8f9fa;\r\n  padding: 15px;\r\n  border-radius: 5px;\r\n  border-left: 4px solid #007bff;\r\n}\r\n</style>\r\n","import { render } from \"./EnhancedValidator.vue?vue&type=template&id=a2d7b1f2\"\nimport script from \"./EnhancedValidator.vue?vue&type=script&lang=js\"\nexport * from \"./EnhancedValidator.vue?vue&type=script&lang=js\"\n\nimport \"./EnhancedValidator.vue?vue&type=style&index=0&id=a2d7b1f2&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","id","role","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_normalizeClass","active","$data","activeTab","onClick","_cache","$event","type","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","urlAnalysisResult","error","_hoisted_10","_toDisplayString","_hoisted_11","for","urlInput","placeholder","onKeyup","_withKeys","args","$options","analyzeUrl","disabled","isAnalyzingUrl","_hoisted_13","transformedUrlResults","_hoisted_14","_createVNode","_component_ReusableResults","results","Array","isArray","citations","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","citationText","validateCitation","_hoisted_20","isValidating","_hoisted_22","_hoisted_23","_hoisted_24","useEnhanced","checked","_hoisted_25","useML","_hoisted_26","useCorrection","validationResult","_hoisted_27","transformedValidationResult","_createBlock","_component_CitationResults","key","citation","_hoisted_28","documentAnalysisResult","_hoisted_29","_component_EnhancedFileUpload","textAnalysisResult","_hoisted_30","_component_EnhancedTextPaste","currentApp","getCurrentInstance","appContext","app","name","components","CitationResults","EnhancedFileUpload","EnhancedTextPaste","ReusableResults","data","mlResult","correctionResult","citationContext","fileLink","contextResult","isAnalyzing","pastedText","metadata","computed","formattedContext","this","context","paragraphs","split","map","p","includes","replace","RegExp","join","basePath","getEmptyResultsObject","console","log","validation","isCourtListener","source","String","verified_by","toLowerCase","Date","now","citation_text","case_name","verified","status","validation_method","confidence","parseFloat","contexts","text","details","url","timestamp","toISOString","verification_steps","sources","verifiedCount","unverifiedCount","result","validation_results","total_citations","verified_count","unverified_count","execution_time","transformedDocumentResults","analysis","transformedTextResults","confirmedCount","totalCitations","confirmed_count","citations_count","filter","Math","random","toString","substr","c","length","unconfirmed_count","JSON","parse","stringify","methods","emptyResult","transformApiResponse","apiResponse","warn","transformedResults","forEach","index","title","trim","test","push","URL","e","eyecite_processed","response","axios","headers","timeout","Error","processedCitations","verification_status","processedAt","citationCount","errorResponse","message","statusText","code","citationToValidate","$toast","warning","getCitationContext","logger","response_data","mlResponse","processed_at","mlError","correctionResponse","suggestions","position","closeOnClick","pauseOnFocusLoss","pauseOnHover","corrError","requestOptions","validateStatus","endpoints","lastError","endpoint","params","URLSearchParams","encodeURIComponent","responseData","file_link","context_available","context_retrieved_at","context_source","context_retrieval_complete","applySuggestion","suggestion","getBadgeClass","validationMethod","analyzeDocument","fileInput","$refs","documentUpload","files","file","validTypes","maxSize","size","formData","FormData","append","fileName","fileSize","fileType","analyzeText","textLength","__exports__","render"],"sourceRoot":""}