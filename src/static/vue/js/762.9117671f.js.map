{"version":3,"file":"js/762.9117671f.js","mappings":"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","sources":["webpack://casestrainer-vue/./src/views/MLClassifier.vue","webpack://casestrainer-vue/./src/views/MLClassifier.vue?3bce"],"sourcesContent":["<template>\r\n  <div class=\"ml-classifier\">\r\n    <h2>Machine Learning Citation Classifier</h2>\r\n    <p class=\"lead\">\r\n      Our ML classifier can predict whether a citation is real or hallucinated without requiring API calls.\r\n      It's trained on our database of confirmed and unconfirmed citations.\r\n    </p>\r\n    \r\n    <div class=\"row mb-4\">\r\n      <div class=\"col-md-6\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">Test a Citation</div>\r\n          <div class=\"card-body\">\r\n            <form @submit.prevent=\"classifyCitation\">\r\n              <div class=\"mb-3\">\r\n                <label for=\"citationText\" class=\"form-label\">Citation Text:</label>\r\n                <input \r\n                  type=\"text\" \r\n                  class=\"form-control\" \r\n                  id=\"citationText\" \r\n                  v-model=\"citationInput.text\"\r\n                  placeholder=\"e.g., 347 U.S. 483\"\r\n                  required\r\n                >\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label for=\"caseName\" class=\"form-label\">Case Name (Optional):</label>\r\n                <input \r\n                  type=\"text\" \r\n                  class=\"form-control\" \r\n                  id=\"caseName\" \r\n                  v-model=\"citationInput.caseName\"\r\n                  placeholder=\"e.g., Brown v. Board of Education\"\r\n                >\r\n                <div class=\"form-text\">Including a case name improves classification accuracy.</div>\r\n              </div>\r\n              <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"classifying\">\r\n                <span v-if=\"classifying\" class=\"spinner-border spinner-border-sm me-2\" role=\"status\" aria-hidden=\"true\"></span>\r\n                Classify Citation\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">Model Information</div>\r\n          <div class=\"card-body\">\r\n            <div class=\"mb-3\">\r\n              <h5>Model Performance</h5>\r\n              <div class=\"row text-center\">\r\n                <div class=\"col-md-4 mb-3\">\r\n                  <h4>95%</h4>\r\n                  <p class=\"text-muted\">Accuracy</p>\r\n                </div>\r\n                <div class=\"col-md-4 mb-3\">\r\n                  <h4>92%</h4>\r\n                  <p class=\"text-muted\">Precision</p>\r\n                </div>\r\n                <div class=\"col-md-4 mb-3\">\r\n                  <h4>93%</h4>\r\n                  <p class=\"text-muted\">Recall</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"mb-3\">\r\n              <h5>Training Data</h5>\r\n              <p>The model is trained on a dataset of:</p>\r\n              <ul>\r\n                <li>500+ confirmed citations from legal databases</li>\r\n                <li>100+ unconfirmed citations from Washington Courts briefs</li>\r\n                <li>50+ synthetically generated hallucinated citations</li>\r\n              </ul>\r\n            </div>\r\n            <div class=\"mb-3\">\r\n              <h5>Features Used</h5>\r\n              <ul>\r\n                <li>Citation format patterns</li>\r\n                <li>Jurisdiction markers</li>\r\n                <li>Year references</li>\r\n                <li>Case name patterns</li>\r\n                <li>Context features</li>\r\n              </ul>\r\n            </div>\r\n            <button class=\"btn btn-outline-primary\" @click=\"trainModel\" :disabled=\"training\">\r\n              <span v-if=\"training\" class=\"spinner-border spinner-border-sm me-2\" role=\"status\" aria-hidden=\"true\"></span>\r\n              Retrain Model\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <div v-if=\"classificationResult\" class=\"card\">\r\n      <div class=\"card-header\">Classification Result</div>\r\n      <div class=\"card-body\">\r\n        <div class=\"row\">\r\n          <div class=\"col-md-6\">\r\n            <h5>Citation Information</h5>\r\n            <table class=\"table table-sm\">\r\n              <tbody>\r\n                <tr>\r\n                  <th scope=\"row\">Citation Text</th>\r\n                  <td>{{ classificationResult.citation }}</td>\r\n                </tr>\r\n                <tr v-if=\"classificationResult.case_name\">\r\n                  <th scope=\"row\">Case Name</th>\r\n                  <td>{{ classificationResult.case_name }}</td>\r\n                </tr>\r\n                <tr v-if=\"classificationResult.format\">\r\n                  <th scope=\"row\">Format</th>\r\n                  <td>{{ classificationResult.format }}</td>\r\n                </tr>\r\n                <tr v-if=\"classificationResult.jurisdiction\">\r\n                  <th scope=\"row\">Jurisdiction</th>\r\n                  <td>{{ classificationResult.jurisdiction }}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div class=\"col-md-6\">\r\n            <h5>Prediction</h5>\r\n            <div class=\"mb-3\">\r\n              <div class=\"d-flex justify-content-between align-items-center mb-2\">\r\n                <span>Likelihood of being a real citation:</span>\r\n                <span class=\"badge\" :class=\"confidenceBadgeClass\">\r\n                  {{ (classificationResult.confidence * 100).toFixed(1) }}%\r\n                </span>\r\n              </div>\r\n              <div class=\"progress\" style=\"height: 25px;\">\r\n                <div \r\n                  class=\"progress-bar\" \r\n                  role=\"progressbar\" \r\n                  :style=\"{ width: (classificationResult.confidence * 100) + '%' }\"\r\n                  :class=\"confidenceProgressClass\"\r\n                  :aria-valuenow=\"classificationResult.confidence * 100\" \r\n                  aria-valuemin=\"0\" \r\n                  aria-valuemax=\"100\"\r\n                >\r\n                  {{ (classificationResult.confidence * 100).toFixed(1) }}%\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"alert\" :class=\"predictionAlertClass\">\r\n              <h5 class=\"alert-heading\">{{ predictionHeading }}</h5>\r\n              <p>{{ classificationResult.explanation }}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div v-if=\"classificationResult.feature_importance\" class=\"mt-4\">\r\n          <h5>Feature Importance</h5>\r\n          <div class=\"row\">\r\n            <div v-for=\"(value, feature) in classificationResult.feature_importance\" :key=\"feature\" class=\"col-md-6 mb-3\">\r\n              <div class=\"d-flex justify-content-between align-items-center mb-1\">\r\n                <span>{{ formatFeatureName(feature) }}</span>\r\n                <span>{{ value.toFixed(2) }}</span>\r\n              </div>\r\n              <div class=\"progress\">\r\n                <div \r\n                  class=\"progress-bar bg-info\" \r\n                  role=\"progressbar\" \r\n                  :style=\"{ width: (value * 100) + '%' }\"\r\n                  :aria-valuenow=\"value * 100\" \r\n                  aria-valuemin=\"0\" \r\n                  aria-valuemax=\"100\"\r\n                ></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div v-if=\"classificationResult.similar_citations && classificationResult.similar_citations.length > 0\" class=\"mt-4\">\r\n          <h5>Similar Citations in Database</h5>\r\n          <div class=\"table-responsive\">\r\n            <table class=\"table table-hover\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Citation</th>\r\n                  <th>Case Name</th>\r\n                  <th>Status</th>\r\n                  <th>Similarity</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr v-for=\"(citation, index) in classificationResult.similar_citations\" :key=\"index\">\r\n                  <td>{{ citation.citation_text }}</td>\r\n                  <td>{{ citation.case_name || 'N/A' }}</td>\r\n                  <td>\r\n                    <span class=\"badge\" :class=\"getStatusBadgeClass(citation.status)\">\r\n                      {{ citation.status }}\r\n                    </span>\r\n                  </td>\r\n                  <td>{{ (citation.similarity * 100).toFixed(1) }}%</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"card mt-4\">\r\n      <div class=\"card-header\">Batch Classification</div>\r\n      <div class=\"card-body\">\r\n        <p>Upload a CSV or text file with one citation per line to classify multiple citations at once.</p>\r\n        <form @submit.prevent=\"batchClassify\">\r\n          <div class=\"mb-3\">\r\n            <label for=\"batchFile\" class=\"form-label\">Upload File:</label>\r\n            <input \r\n              type=\"file\" \r\n              class=\"form-control\" \r\n              id=\"batchFile\" \r\n              ref=\"batchFileInput\"\r\n              accept=\".csv,.txt\"\r\n            >\r\n            <div class=\"form-text\">CSV format should have columns for citation_text and optionally case_name.</div>\r\n          </div>\r\n          <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"batchProcessing\">\r\n            <span v-if=\"batchProcessing\" class=\"spinner-border spinner-border-sm me-2\" role=\"status\" aria-hidden=\"true\"></span>\r\n            Process Batch\r\n          </button>\r\n        </form>\r\n        \r\n        <div v-if=\"batchResults.length > 0\" class=\"mt-4\">\r\n          <h5>Batch Results</h5>\r\n          <div class=\"table-responsive\">\r\n            <table class=\"table table-hover\">\r\n              <thead>\r\n                <tr>\r\n                  <th>#</th>\r\n                  <th>Citation</th>\r\n                  <th>Case Name</th>\r\n                  <th>Confidence</th>\r\n                  <th>Prediction</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr v-for=\"(result, index) in batchResults\" :key=\"index\">\r\n                  <td>{{ index + 1 }}</td>\r\n                  <td>{{ result.citation }}</td>\r\n                  <td>{{ result.case_name || 'N/A' }}</td>\r\n                  <td>\r\n                    <div class=\"progress\">\r\n                      <div \r\n                        class=\"progress-bar\" \r\n                        role=\"progressbar\" \r\n                        :style=\"{ width: (result.confidence * 100) + '%' }\"\r\n                        :class=\"getConfidenceProgressClass(result.confidence)\"\r\n                        :aria-valuenow=\"result.confidence * 100\" \r\n                        aria-valuemin=\"0\" \r\n                        aria-valuemax=\"100\"\r\n                      >\r\n                        {{ (result.confidence * 100).toFixed(1) }}%\r\n                      </div>\r\n                    </div>\r\n                  </td>\r\n                  <td>\r\n                    <span class=\"badge\" :class=\"getPredictionBadgeClass(result.confidence)\">\r\n                      {{ getPredictionText(result.confidence) }}\r\n                    </span>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div class=\"mt-3\">\r\n            <button class=\"btn btn-success\" @click=\"exportBatchResults\">\r\n              <i class=\"bi bi-download\"></i> Export Results\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport api from '@/api/citations';\r\n\r\nexport default {\r\n  name: 'MLClassifier',\r\n  data() {\r\n    return {\r\n      citationInput: {\r\n        text: '',\r\n        caseName: ''\r\n      },\r\n      classifying: false,\r\n      training: false,\r\n      classificationResult: null,\r\n      batchProcessing: false,\r\n      batchResults: []\r\n    };\r\n  },\r\n  computed: {\r\n    confidenceBadgeClass() {\r\n      const confidence = this.classificationResult?.confidence || 0;\r\n      if (confidence >= 0.9) return 'bg-success';\r\n      if (confidence >= 0.7) return 'bg-warning text-dark';\r\n      return 'bg-danger';\r\n    },\r\n    confidenceProgressClass() {\r\n      const confidence = this.classificationResult?.confidence || 0;\r\n      if (confidence >= 0.9) return 'bg-success';\r\n      if (confidence >= 0.7) return 'bg-warning';\r\n      return 'bg-danger';\r\n    },\r\n    predictionAlertClass() {\r\n      const confidence = this.classificationResult?.confidence || 0;\r\n      if (confidence >= 0.9) return 'alert-success';\r\n      if (confidence >= 0.7) return 'alert-warning';\r\n      return 'alert-danger';\r\n    },\r\n    predictionHeading() {\r\n      const confidence = this.classificationResult?.confidence || 0;\r\n      if (confidence >= 0.9) return 'Likely Real Citation';\r\n      if (confidence >= 0.7) return 'Possibly Real Citation';\r\n      return 'Likely Hallucinated Citation';\r\n    }\r\n  },\r\n  methods: {\r\n    async classifyCitation() {\r\n      if (!this.citationInput.text) return;\r\n      \r\n      this.classifying = true;\r\n      \r\n      try {\r\n        const response = await api.classifyCitation(\r\n          this.citationInput.text,\r\n          this.citationInput.caseName || null\r\n        );\r\n        \r\n        this.classificationResult = response.data;\r\n      } catch (error) {\r\n        // console.error('Error classifying citation:', error);\r\n        // Handle error\r\n      } finally {\r\n        this.classifying = false;\r\n      }\r\n    },\r\n    \r\n    async trainModel() {\r\n      this.training = true;\r\n      \r\n      try {\r\n        const response = await api.trainMLClassifier();\r\n        \r\n        // Show success message or update model info\r\n        alert('Model training completed successfully!');\r\n      } catch (error) {\r\n        // console.error('Error training model:', error);\r\n        alert('Error training model. Please try again.');\r\n      } finally {\r\n        this.training = false;\r\n      }\r\n    },\r\n    \r\n    async batchClassify() {\r\n      const fileInput = this.$refs.batchFileInput;\r\n      if (!fileInput.files || fileInput.files.length === 0) return;\r\n      \r\n      const file = fileInput.files[0];\r\n      this.batchProcessing = true;\r\n      \r\n      try {\r\n        // In a real implementation, you would:\r\n        // 1. Read the file\r\n        // 2. Parse CSV/text\r\n        // 3. Send to API for batch processing\r\n        // 4. Process results\r\n        \r\n        // For now, we'll simulate batch processing with a timeout\r\n        setTimeout(() => {\r\n          // Simulate batch results\r\n          this.batchResults = [\r\n            { citation: '347 U.S. 483', case_name: 'Brown v. Board of Education', confidence: 0.98 },\r\n            { citation: '410 U.S. 113', case_name: 'Roe v. Wade', confidence: 0.97 },\r\n            { citation: '384 U.S. 436', case_name: 'Miranda v. Arizona', confidence: 0.95 },\r\n            { citation: '123 F.4d 456', case_name: 'Smith v. Jones', confidence: 0.45 },\r\n            { citation: '789 P.3d 123', case_name: 'Washington v. Oregon', confidence: 0.72 }\r\n          ];\r\n          \r\n          this.batchProcessing = false;\r\n        }, 2000);\r\n      } catch (error) {\r\n        // console.error('Error processing batch:', error);\r\n        alert('Error processing batch. Please try again.');\r\n        this.batchProcessing = false;\r\n      }\r\n    },\r\n    \r\n    exportBatchResults() {\r\n      // Create CSV content\r\n      let csvContent = 'data:text/csv;charset=utf-8,';\r\n      csvContent += 'Citation,Case Name,Confidence,Prediction\\n';\r\n      \r\n      this.batchResults.forEach(result => {\r\n        csvContent += `\"${result.citation}\",\"${result.case_name || ''}\",${result.confidence.toFixed(4)},\"${this.getPredictionText(result.confidence)}\"\\n`;\r\n      });\r\n      \r\n      // Create download link\r\n      const encodedUri = encodeURI(csvContent);\r\n      const link = document.createElement('a');\r\n      link.setAttribute('href', encodedUri);\r\n      link.setAttribute('download', 'citation_classification_results.csv');\r\n      document.body.appendChild(link);\r\n      \r\n      // Trigger download\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    },\r\n    \r\n    formatFeatureName(feature) {\r\n      // Convert snake_case to Title Case with spaces\r\n      return feature\r\n        .split('_')\r\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n        .join(' ');\r\n    },\r\n    \r\n    getStatusBadgeClass(status) {\r\n      switch (status.toLowerCase()) {\r\n        case 'confirmed': return 'bg-success';\r\n        case 'unconfirmed': return 'bg-warning text-dark';\r\n        case 'hallucinated': return 'bg-danger';\r\n        default: return 'bg-secondary';\r\n      }\r\n    },\r\n    \r\n    getConfidenceProgressClass(confidence) {\r\n      if (confidence >= 0.9) return 'bg-success';\r\n      if (confidence >= 0.7) return 'bg-warning';\r\n      return 'bg-danger';\r\n    },\r\n    \r\n    getPredictionBadgeClass(confidence) {\r\n      if (confidence >= 0.9) return 'bg-success';\r\n      if (confidence >= 0.7) return 'bg-warning text-dark';\r\n      return 'bg-danger';\r\n    },\r\n    \r\n    getPredictionText(confidence) {\r\n      if (confidence >= 0.9) return 'Real';\r\n      if (confidence >= 0.7) return 'Possibly Real';\r\n      return 'Hallucinated';\r\n    }\r\n  }\r\n}\r\n</script>\r\n","import { render } from \"./MLClassifier.vue?vue&type=template&id=4d8286b2\"\nimport script from \"./MLClassifier.vue?vue&type=script&lang=js\"\nexport * from \"./MLClassifier.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","role","style","type","id","ref","accept","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","onSubmit","_cache","_withModifiers","args","$options","classifyCitation","_hoisted_6","for","$data","citationInput","text","$event","placeholder","required","_hoisted_7","caseName","disabled","classifying","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","onClick","trainModel","training","_hoisted_14","classificationResult","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","scope","_toDisplayString","citation","case_name","_hoisted_20","format","_hoisted_21","jurisdiction","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_normalizeClass","confidenceBadgeClass","confidence","toFixed","_hoisted_26","confidenceProgressClass","_normalizeStyle","width","_hoisted_27","predictionAlertClass","_hoisted_28","predictionHeading","explanation","feature_importance","_hoisted_29","_hoisted_30","_Fragment","_renderList","value","feature","key","_hoisted_31","formatFeatureName","_hoisted_32","similar_citations","length","_hoisted_34","_hoisted_35","_hoisted_36","index","citation_text","getStatusBadgeClass","status","similarity","_hoisted_37","_hoisted_38","batchClassify","_hoisted_39","_hoisted_40","batchProcessing","_hoisted_42","batchResults","_hoisted_43","_hoisted_44","_hoisted_45","result","_hoisted_46","getConfidenceProgressClass","_hoisted_47","getPredictionBadgeClass","getPredictionText","_hoisted_48","exportBatchResults","name","data","computed","this","methods","response","api","error","trainMLClassifier","alert","fileInput","$refs","batchFileInput","files","setTimeout","csvContent","forEach","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","removeChild","split","map","word","charAt","toUpperCase","slice","join","toLowerCase","__exports__","render"],"sourceRoot":""}