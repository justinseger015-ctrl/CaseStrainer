// Global state to track processing status
window.citationProcessing = {
    isProcessing: false,
    analysisId: null,
    startTime: null,
    totalCitations: 0,
    processedCitations: 0,
    progressInterval: null
};

document.addEventListener('DOMContentLoaded', function() {
    // Always use the /casestrainer/ prefix for API calls to work with Nginx proxy
    const basePath = window.location.pathname.includes('/casestrainer/') ? '/casestrainer' : '';
    const uploadForm = document.getElementById('uploadForm');
    const pasteForm = document.getElementById('pasteForm');
    
    // Function to create and update progress bar
    function setupProgressTracking(form) {
        // Create progress UI
        const progressContainer = document.createElement('div');
        progressContainer.className = 'progress mt-3';
        progressContainer.style.height = '20px';
        
        const progressBar = document.createElement('div');
        progressBar.className = 'progress-bar progress-bar-striped progress-bar-animated';
        progressBar.role = 'progressbar';
        progressBar.style.width = '0%';
        progressBar.setAttribute('aria-valuenow', '0');
        progressBar.setAttribute('aria-valuemin', '0');
        progressBar.setAttribute('aria-valuemax', '100');
        progressBar.textContent = 'Starting...';
        
        progressContainer.appendChild(progressBar);
        form.appendChild(progressContainer);
        
        // Initialize progress tracking
        window.citationProcessing = {
            isProcessing: true,
            startTime: new Date(),
            totalCitations: 100, // Default estimate
            processedCitations: 0,
            progressInterval: null
        };
        
        // Start progress polling
        window.citationProcessing.progressInterval = setInterval(() => {
            fetch(`${basePath}/api/processing_progress?total=${window.citationProcessing.totalCitations}`, {
                method: 'GET'
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    window.citationProcessing.processedCitations = data.processed_citations;
                    
                    // Calculate progress percentage
                    const progress = data.total_citations > 0 ? 
                        Math.min(Math.round((data.processed_citations / data.total_citations) * 100), 100) : 0;
                    
                    // Update progress bar
                    progressBar.style.width = `${progress}%`;
                    progressBar.setAttribute('aria-valuenow', progress);
                    progressBar.textContent = `${progress}% (${data.processed_citations}/${data.total_citations})`;
                    
                    // Check if processing is complete
                    if (data.is_complete) {
                        clearInterval(window.citationProcessing.progressInterval);
                        window.citationProcessing.isProcessing = false;
                        progressBar.textContent = 'Complete!';
                        progressBar.className = 'progress-bar bg-success';
                    }
                }
            })
            .catch(error => {
                console.error('Error checking progress:', error);
                clearInterval(window.citationProcessing.progressInterval);
                progressBar.textContent = 'Error tracking progress';
                progressBar.className = 'progress-bar bg-danger';
            });
        }, 1000);
        
        return progressContainer;
    }
    
    // Handle file upload form submission
    if (uploadForm) {
        uploadForm.addEventListener('submit', function(e) {
            e.preventDefault(); // Prevent traditional form submission
            
            const submitButton = this.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;
            submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Analyzing...';
            submitButton.disabled = true;
            
            const formData = new FormData(this);
            
            // Setup progress tracking
            const progressContainer = setupProgressTracking(this);
            
            fetch(`${basePath}/api/analyze`, {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Analysis results:', data);
                
                // Store the analysis results
                window.analysisResults = data;
                
                // Update citation count for progress tracking
                if (data.citations_count) {
                    window.citationProcessing.totalCitations = data.citations_count;
                }
                
                // No longer automatically switch tabs - stay on current tab
                // User can manually select which tab to view after processing
                
                // Reset button
                submitButton.innerHTML = originalButtonText;
                submitButton.disabled = false;
            })
            .catch(error => {
                console.error('Error analyzing document:', error);
                alert('Error analyzing document: ' + error.message);
                
                // Reset button
                submitButton.innerHTML = originalButtonText;
                submitButton.disabled = false;
                
                // Remove progress bar on error
                if (progressContainer) {
                    progressContainer.remove();
                }
                
                // Clear progress interval
                if (window.citationProcessing.progressInterval) {
                    clearInterval(window.citationProcessing.progressInterval);
                    window.citationProcessing.isProcessing = false;
                }
            });
        });
    }
    
    // Handle paste text form submission
    if (pasteForm) {
        pasteForm.addEventListener('submit', function(e) {
            e.preventDefault(); // Prevent traditional form submission
            
            const submitButton = this.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;
            submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Analyzing...';
            submitButton.disabled = true;
            
            const formData = new FormData(this);
            
            // Setup progress tracking
            const progressContainer = setupProgressTracking(this);
            
            fetch(`${basePath}/api/analyze`, {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Analysis results:', data);
                
                // Store the analysis results
                window.analysisResults = data;
                
                // Update citation count for progress tracking
                if (data.citations_count) {
                    window.citationProcessing.totalCitations = data.citations_count;
                }
                
                // No longer automatically switch tabs - stay on current tab
                // User can manually select which tab to view after processing
                
                // Reset button
                submitButton.innerHTML = originalButtonText;
                submitButton.disabled = false;
            })
            .catch(error => {
                console.error('Error analyzing document:', error);
                alert('Error analyzing document: ' + error.message);
                
                // Reset button
                submitButton.innerHTML = originalButtonText;
                submitButton.disabled = false;
                
                // Remove progress bar on error
                if (progressContainer) {
                    progressContainer.remove();
                }
                
                // Clear progress interval
                if (window.citationProcessing.progressInterval) {
                    clearInterval(window.citationProcessing.progressInterval);
                    window.citationProcessing.isProcessing = false;
                }
            });
        });
    }
    
    // Load data for tabs when they're clicked
    const tabButtons = document.querySelectorAll('.nav-link[data-bs-toggle="tab"]');
    tabButtons.forEach(button => {
        button.addEventListener('click', function() {
            const tabId = this.getAttribute('data-bs-target');
            
            // Load data based on which tab was clicked
            if (tabId === '#multitool' && document.querySelector('#multitool-tab.active')) {
                // This will be handled by the multitool-citations.js file
            } else if (tabId === '#unconfirmed' && document.querySelector('#unconfirmed-tab.active')) {
                // This will be handled by the unconfirmed-citations.js file
            } else if (tabId === '#cl-gaps' && document.querySelector('#cl-gaps-tab.active')) {
                // This will be handled by the courtlistener-gaps.js file
            }
        });
    });
});
