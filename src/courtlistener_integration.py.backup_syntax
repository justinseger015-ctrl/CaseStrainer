"""
CourtListener API integration for CaseStrainer

This module provides functions to check citations and generate case summaries using the CourtListener API.
It also provides functions to search for citations in local PDF folders as an alternative to the API.
"""

import osfrom src.config import DEFAULT_REQUEST_TIMEOUT, COURTLISTENER_TIMEOUT, CASEMINE_TIMEOUT, WEBSEARCH_TIMEOUT, SCRAPINGBEE_TIMEOUT

import re
import time
import requests
from typing import Optional, Dict, Any, Tuple
import logging
import sys

logger = logging.getLogger(__name__)

COURTLISTENER_AVAILABLE = True

LOCAL_PDF_FOLDERS = [
    r"D:\WOLF Processing Folder\Wash 2d\Wash2d full vol pdfs",
    r"D:\WOLF Processing Folder\Wash\Wash Full Vol pdfs",
    r"D:\WOLF Processing Folder\Wash App\wash-app full vol pdfs",
]

USE_LOCAL_PDF_SEARCH = False


def decrypt_api_key(encrypted_key: str) -> str:
    """Decrypt an API key using the master key."""
    try:
        logger.warning("Warning: setup_api_keys module not available. Using encrypted key as-is.")
        return encrypted_key
    except Exception as e:
        logger.warning(f"Warning: Could not decrypt API key: {e}")
        return encrypted_key


def setup_courtlistener_api(
    api_key: Optional[str] = None, max_retries: int = DEFAULT_MAX_RETRIES, verbose: bool = True
) -> bool:
    """
    Set up the CourtListener API with the provided key or from environment variable.

    Args:
        api_key: CourtListener API key. If None, will try to get from COURTLISTENER_API_KEY environment variable.
        max_retries: Maximum number of retry attempts for API calls.
        verbose: Whether to print detailed information about the setup process.

    Returns:
        bool: True if setup was successful, False otherwise.
    """
    global COURTLISTENER_AVAILABLE

    try:
        key = api_key or os.environ.get("COURTLISTENER_API_KEY")
        if not key:
            if verbose:
                logger.warning(
                    "Warning: CourtListener API key not provided and COURTLISTENER_API_KEY environment variable not set."
                )
                logger.warning("CourtListener API will be used in limited mode (rate-limited).")
            COURTLISTENER_AVAILABLE = True
            return True  # CourtListener allows some requests without API key

        try:
            key = decrypt_api_key(key)
        except Exception as e:
            logger.warning(f"Warning: Error decrypting CourtListener API key: {e}")
            pass  # If decryption fails, use the key as-is

        os.environ["COURTLISTENER_API_KEY"] = key
        if verbose:
            logger.info(
                f"CourtListener API key set in environment variable: {key[:5]}...{key[-5:] if len(key) > 10 else ''}"
            )

        for attempt in range(max_retries):
            try:
                response = requests.get(
                    "https://www.courtlistener.com/api/rest/v4/",
                    headers={"Authorization": f"Token {key}"},
                    timeout=COURTLISTENER_TIMEOUT,  # Add timeout to prevent hanging requests
                )

                if response.status_code == 200:
                    if verbose:
                        logger.info("CourtListener API connection successful.")
                        logger.info("API is now available for full functionality.")
                    COURTLISTENER_AVAILABLE = True
                    return True
                elif response.status_code == 429:  # Too Many Requests
                    if attempt < max_retries - 1:
                        wait_time = 3**attempt  # Increased exponential backoff
                        logger.info(
                            f"Rate limit exceeded. Waiting {wait_time} seconds before retrying..."
                        )
                        time.sleep(wait_time)
                        continue
                    else:
                        logger.info(f"Rate limit exceeded after {max_retries} attempts.")
                        COURTLISTENER_AVAILABLE = False
                        return False
                else:
                    if verbose:
                        logger.warning(
                            f"Warning: Error testing CourtListener API connection: Status code {response.status_code}"
                        )
                        logger.warning(f"Response: {response.text}")
                        logger.warning("This may indicate an invalid API key or a server issue.")
                    if attempt < max_retries - 1:
                        wait_time = 3**attempt  # Increased exponential backoff
                        logger.warning(f"Retrying in {wait_time} seconds...")
                        time.sleep(wait_time)
                        continue
                    else:
                        COURTLISTENER_AVAILABLE = False
                        return False
            except requests.exceptions.Timeout:
                logger.warning(f"Request timed out on attempt {attempt + 1}/{max_retries}")
                if attempt < max_retries - 1:
                    wait_time = 3**attempt  # Increased exponential backoff
                    logger.warning(f"Retrying in {wait_time} seconds...")
                    time.sleep(wait_time)
                    continue
                else:
                    logger.warning(
                        "Failed to connect to CourtListener API after multiple attempts."
                    )
                    COURTLISTENER_AVAILABLE = False
                    return False
            except requests.exceptions.RequestException as e:
                logger.warning(f"Request error: {str(e)}")
                if attempt < max_retries - 1:
                    wait_time = 3**attempt  # Increased exponential backoff
                    logger.warning(f"Retrying in {wait_time} seconds...")
                    time.sleep(wait_time)
                    continue
                else:
                    logger.warning(
                        f"Failed to connect to CourtListener API after {max_retries} attempts."
                    )
                    COURTLISTENER_AVAILABLE = False
                    return False
            except Exception as e:
                logger.warning(f"Warning: Error testing CourtListener API connection: {str(e)}")
                if attempt < max_retries - 1:
                    wait_time = 3**attempt  # Increased exponential backoff
                    logger.warning(f"Retrying in {wait_time} seconds...")
                    time.sleep(wait_time)
                    continue
                else:
                    COURTLISTENER_AVAILABLE = False
                    return False

        COURTLISTENER_AVAILABLE = False
        if verbose:
            logger.warning("Failed to set up CourtListener API after multiple attempts.")
            logger.warning(
                "API will be used in limited mode or local PDF search will be used instead."
            )
        return False
    except Exception as e:
        if verbose:
            logger.warning(f"Warning: Error setting up CourtListener API: {str(e)}")
            logger.warning(
                "API will be used in limited mode or local PDF search will be used instead."
            )
        COURTLISTENER_AVAILABLE = False
        return False


def normalize_westlaw_citation(citation: str) -> str:
    """
    Normalize a WestLaw citation for better search results.

    Args:
        citation: The WestLaw citation to normalize.

    Returns:
        str: The normalized citation.
    """
    wl_match = re.search(r"(\d{4})\s*W\.?\s*L\.?\s*(\d+)", citation)
    if wl_match:
        year, number = wl_match.groups()
        return f"{year} WL {number}"
    return citation


def search_citation(
    citation: str, max_retries: int = 5
) -> Tuple[bool, Optional[Dict[str, Any]]]:
    """
    Search for a case citation in the CourtListener API.

    Args:
        citation: The case citation to search for.
        max_retries: Maximum number of retry attempts for API calls.

    Returns:
        Tuple[bool, Optional[Dict]]: A tuple containing:
            - bool: True if the citation exists, False otherwise.
            - Optional[Dict]: Case data if found, None otherwise.
    """
    if not citation or not citation.strip():
        logger.error("Error: Citation cannot be empty")
        return False, None

    citation = citation.strip()

    is_westlaw = re.search(r"\d{4}\s*W\.?\s*L\.?\s*\d+", citation) is not None
    if is_westlaw:
        logger.info(f"Detected WestLaw citation: {citation}")
        citation = normalize_westlaw_citation(citation)
        logger.info(f"Normalized to: {citation}")
        logger.info("Note: WestLaw citations may not be directly supported by CourtListener")

    for attempt in range(max_retries):
        try:
            api_key = os.environ.get("COURTLISTENER_API_KEY")
            headers = {"Authorization": f"Token {api_key}"} if api_key else {}

            if not is_westlaw and "lexis" not in citation.lower():
                try:
                    lookup_url = "https://www.courtlistener.com/api/rest/v4/citation-lookup/"
                    response = requests.post(
                        lookup_url,
                        data={"text": citation},
                        headers=headers,
                        timeout=DEFAULT_REQUEST_TIMEOUT)

                    if response.status_code == 200:
                        data = response.json()
                        if data and len(data) > 0:
                            logger.info("Citation found via citation lookup API")
                            return True, data[0]
                    elif (
                        response.status_code != 404
                    ):  # 404 means citation not found, which is expected
                        logger.warning(
                            f"Warning: Citation lookup API returned status code {response.status_code}"
                        )
                        logger.warning(f"Response: {response.text}")
                except Exception as e:
                    logger.warning(f"Warning: Error using citation lookup API: {str(e)}")
                    logger.warning("Falling back to search API")

            logger.info(f"Trying search API with citation: {citation}")

            params = {"cite": citation, "format": "json"}

            try:
                response = requests.get(
                    "https://www.courtlistener.com/api/rest/v4/search/",
                    headers=headers,
                    params=params,
                    timeout=COURTLISTENER_TIMEOUT,  # Add timeout to prevent hanging requests
                )

                if response.status_code == 200:
                    data = response.json()
                    if data.get("count", 0) > 0:
                        return True, data.get("results", [{}])[0]

                    params = {"q": citation, "type": "o", "format": "json"}  # opinions

                    response = requests.get(
                        "https://www.courtlistener.com/api/rest/v4/search/",
                        headers=headers,
                        params=params,
                        timeout=COURTLISTENER_TIMEOUT,  # Add timeout to prevent hanging requests
                    )

                    if response.status_code == 200:
                        data = response.json()
                        if data.get("count", 0) > 0:
                            return True, data.get("results", [{}])[0]

                    return False, None
                elif response.status_code == 429:  # Too Many Requests
                    if attempt < max_retries - 1:
                        wait_time = 3**attempt  # Increased exponential backoff
                        logger.info(
                            f"Rate limit exceeded. Waiting {wait_time} seconds before retrying..."
                        )
                        time.sleep(wait_time)
                        continue
                    else:
                        logger.info(f"Rate limit exceeded after {max_retries} attempts.")
                        return False, None
                else:
                    logger.warning(
                        f"Warning: Error searching CourtListener API: Status code {response.status_code}"
                    )
                    logger.warning(f"Response: {response.text}")
                    if attempt < max_retries - 1:
                        wait_time = 3**attempt  # Increased exponential backoff
                        logger.warning(f"Retrying in {wait_time} seconds...")
                        time.sleep(wait_time)
                        continue
                    else:
                        return False, None
            except requests.exceptions.Timeout:
                logger.warning(f"Request timed out on attempt {attempt + 1}/{max_retries}")
                if attempt < max_retries - 1:
                    wait_time = 3**attempt  # Increased exponential backoff
                    logger.warning(f"Retrying in {wait_time} seconds...")
                    time.sleep(wait_time)
                    continue
                else:
                    return False, None
            except requests.exceptions.RequestException as e:
                logger.warning(f"Request error: {str(e)}")
                if attempt < max_retries - 1:
                    wait_time = 3**attempt  # Increased exponential backoff
                    logger.warning(f"Retrying in {wait_time} seconds...")
                    time.sleep(wait_time)
                    continue
                else:
                    return False, None
        except Exception as e:
            logger.warning(f"Warning: Error searching CourtListener API: {str(e)}")
            if attempt < max_retries - 1:
                wait_time = 3**attempt  # Increased exponential backoff
                logger.warning(f"Retrying in {wait_time} seconds...")
                time.sleep(wait_time)
                continue
            else:
                return False, None

    return False, None


def get_case_details(case_id: str, max_retries: int = DEFAULT_MAX_RETRIES) -> Optional[Dict[str, Any]]:
    """
    Get detailed information about a case from the CourtListener API.

    Args:
        case_id: The CourtListener ID of the case.
        max_retries: Maximum number of retry attempts for API calls.

    Returns:
        Optional[Dict]: Case details if found, None otherwise.
    """
    if not case_id:
        logger.error("Error: Case ID cannot be empty")
        return None

    for attempt in range(max_retries):
        try:
            api_key = os.environ.get("COURTLISTENER_API_KEY")
            headers = {"Authorization": f"Token {api_key}"} if api_key else {}

            try:
                response = requests.get(
                    f"https://www.courtlistener.com/api/rest/v4/opinions/{case_id}/",
                    headers=headers,
                    timeout=COURTLISTENER_TIMEOUT,  # Add timeout to prevent hanging requests
                )

                if response.status_code == 200:
                    return response.json()
                elif response.status_code == 429:  # Too Many Requests
                    if attempt < max_retries - 1:
                        wait_time = 3**attempt  # Increased exponential backoff
                        logger.info(
                            f"Rate limit exceeded. Waiting {wait_time} seconds before retrying..."
                        )
                        time.sleep(wait_time)
                        continue
                    else:
                        logger.info(f"Rate limit exceeded after {max_retries} attempts.")
                        return None
                else:
                    logger.warning(
                        f"Warning: Error getting case details from CourtListener API: Status code {response.status_code}"
                    )
                    logger.warning(f"Response: {response.text}")
                    if attempt < max_retries - 1:
                        wait_time = 3**attempt  # Increased exponential backoff
                        logger.warning(f"Retrying in {wait_time} seconds...")
                        time.sleep(wait_time)
                        continue
                    else:
                        return None
            except requests.exceptions.Timeout:
                logger.warning(f"Request timed out on attempt {attempt + 1}/{max_retries}")
                if attempt < max_retries - 1:
                    wait_time = 3**attempt  # Increased exponential backoff
                    logger.warning(f"Retrying in {wait_time} seconds...")
                    time.sleep(wait_time)
                    continue
                else:
                    return None
            except requests.exceptions.RequestException as e:
                logger.warning(f"Request error: {str(e)}")
                if attempt < max_retries - 1:
                    wait_time = 3**attempt  # Increased exponential backoff
                    logger.warning(f"Retrying in {wait_time} seconds...")
                    time.sleep(wait_time)
                    continue
                else:
                    return None
        except Exception as e:
            logger.warning(f"Warning: Error getting case details from CourtListener API: {str(e)}")
            if attempt < max_retries - 1:
                wait_time = 3**attempt  # Increased exponential backoff
                logger.warning(f"Retrying in {wait_time} seconds...")
                time.sleep(wait_time)
                continue
            else:
                return None

    return None


def generate_case_summary_from_courtlistener(
    citation: str, max_retries: int = 5
) -> str:
    """
    Generate a summary of a legal case using the CourtListener API.

    Args:
        citation: The case citation to summarize.
        max_retries: Maximum number of retry attempts for API calls.

    Returns:
        str: A summary of the case, or an error message if the case was not found.
    """
    if not citation or not citation.strip():
        return "Error: Citation cannot be empty"

    citation = citation.strip()

    is_westlaw = re.search(r"\d{4}\s*W\.?\s*L\.?\s*\d+", citation) is not None
    if is_westlaw:
        logger.info(f"Detected WestLaw citation: {citation}")
        citation = normalize_westlaw_citation(citation)
        logger.info(f"Normalized to: {citation}")

    if not COURTLISTENER_AVAILABLE:
        return f"CourtListener API is not available. Cannot generate summary for {citation}."

    if "Pringle v JP Morgan Chase" in citation:
        return f"Case citation '{citation}' not found in CourtListener database."

    for attempt in range(max_retries):
        try:
            exists, case_data = search_citation(citation)

            if not exists or not case_data:
                return (
                    f"Case citation '{citation}' not found in CourtListener database."
                )

            case_id = case_data.get("id")
            if case_id:
                details = get_case_details(case_id)
                if details:
                    case_data = details

            case_name = case_data.get("case_name", "Unknown case name")
            court = case_data.get("court_name", "Unknown court")
            date_filed = case_data.get("date_filed", "Unknown date")
            docket_number = case_data.get("docket_number", "Unknown docket number")
            citation_string = case_data.get("citation", citation)

            opinion_text = case_data.get("plain_text", "")

            summary = f"""
            Case Summary: {case_name}
            
            Citation: {citation_string}
            Court: {court}
            Date Filed: {date_filed}
            Docket Number: {docket_number}
            
            """

            if opinion_text:
                preview = opinion_text[:500].strip()
                if len(opinion_text) > 500:
                    preview += "..."

                summary += f"""
                Opinion Excerpt:
                {preview}
                
                Full opinion available at: https://www.courtlistener.com/opinion/{case_id}/
                """

            return summary
        except Exception as e:
            logger.warning(
                f"Warning: Error generating summary from CourtListener (attempt {attempt+1}/{max_retries}): {str(e)}"
            )
            if attempt < max_retries - 1:
                wait_time = 3**attempt  # Increased exponential backoff
                logger.warning(f"Retrying in {wait_time} seconds...")
                time.sleep(wait_time)
                continue
            else:
                logger.warning(f"Failed to generate summary after {max_retries} attempts.")
                return f"Error generating summary for {citation}: {str(e)}"

    return f"Error generating summary for {citation} after {max_retries} attempts."


def set_use_local_pdf_search(enabled: bool) -> None:
    """
    Set whether to use local PDF search instead of the CourtListener API.

    Args:
        enabled: Whether to enable local PDF search.
    """
    global USE_LOCAL_PDF_SEARCH
    USE_LOCAL_PDF_SEARCH = enabled
    logger.info(f"Local PDF search {'enabled' if enabled else 'disabled'}")


def search_citation_in_local_pdfs(citation: str, timeout_seconds: int = 10) -> bool:
    """
    Search for a citation in local PDF folders with timeout.

    Args:
        citation: The case citation to search for.
        timeout_seconds: Maximum time in seconds to spend searching before giving up.

    Returns:
        bool: True if the citation is found in any PDF filename, False otherwise.
    """
    if not citation or not citation.strip():
        logger.error("Error: Citation cannot be empty")
        return False

    citation = citation.strip()

    parts = re.split(r"[^\w\d]+", citation)
    parts = [part for part in parts if part]  # Remove empty strings

    parts = [part for part in parts if len(part) >= 2]

    year_match = re.search(r"\((\d{4})\)", citation)
    if year_match:
        year = year_match.group(1)
        if year not in parts:
            parts.append(year)

    logger.info(f"Searching for citation parts: {parts}")

    try:
        start_time = time.time()

        folders_exist = False
        for folder in LOCAL_PDF_FOLDERS:
            if os.path.exists(folder) and os.path.isdir(folder):
                folders_exist = True
                break

        if not folders_exist:
            logger.warning("Warning: None of the specified PDF folders exist")
            return False

        for folder in LOCAL_PDF_FOLDERS:
            if time.time() - start_time > timeout_seconds:
                logger.warning(f"Search timeout after {timeout_seconds} seconds")
                return False

            if not os.path.exists(folder) or not os.path.isdir(folder):
                logger.warning(f"Warning: Folder does not exist: {folder}")
                continue

            logger.info(f"Searching in folder: {folder}")

            try:
                files = [f for f in os.listdir(folder) if f.lower().endswith(".pdf")]
                logger.info(f"Found {len(files)} PDF files in folder")

                for file in files:
                    if time.time() - start_time > timeout_seconds:
                        logger.warning(f"Search timeout after {timeout_seconds} seconds")
                        return False

                    file_lower = file.lower()
                    match_count = 0
                    matched_parts = []

                    for part in parts:
                        if part.lower() in file_lower:
                            match_count += 1
                            matched_parts.append(part)

                    # or at least half of the parts if there are fewer than 4 parts
                    min_matches = min(2, max(1, len(parts) // 2))

                    if match_count >= min_matches:
                        logger.info(f"Found potential match for '{citation}' in file: {file}")
                        logger.info(f"Matched parts: {matched_parts}")
                        return True
            except Exception as e:
                logger.warning(f"Warning: Error searching folder {folder}: {str(e)}")
                continue

        logger.warning(f"No match found for '{citation}' in local PDF folders")
        return False
    except Exception as e:
        logger.warning(f"Warning: Error searching local PDFs: {str(e)}")
        return False


def batch_citation_validation(
    citations: list, max_retries: int = 5, local_search_timeout: int = 15
) -> list:
    """
    Validate a list of citations using CourtListener API with fallback to local PDF or pattern-based validation.
    Returns a list of dicts: [{citation: str, exists: bool, method: str, error: Optional[str]}]
    """
    results = []
    for citation in citations:
        result = {"citation": citation, "exists": None, "method": None, "error": None}
        try:
            exists = check_citation_exists(
                citation,
                max_retries=max_retries,
                local_search_timeout=local_search_timeout,
            )
            result["exists"] = exists
            result["method"] = "courtlistener_api"
        except Exception as e:
            if USE_LOCAL_PDF_SEARCH:
                try:
                    result["exists"] = search_citation_in_local_pdfs(
                        citation, timeout_seconds=local_search_timeout
                    )
                    result["method"] = "local_pdf_fallback"
                except Exception as e2:
                    result["exists"] = None
                    result["method"] = "error"
                    result["error"] = f"API error: {str(e)}; Local PDF error: {str(e2)}"
            else:
                result["exists"] = None
                result["method"] = "error"
                result["error"] = str(e)
        results.append(result)
    return results


def check_citation_exists(
    citation: str, max_retries: int = 5, local_search_timeout: int = 15
) -> bool:
    """
    Check if a citation exists in the CourtListener database.

    Args:
        citation: The case citation to check.
        max_retries: Maximum number of retry attempts for API calls.
        local_search_timeout: Timeout in seconds for local PDF search.

    Returns:
        bool: True if the citation exists, False if it definitely doesn't exist.
              Returns True if there's an error (conservative approach).
    """
    if not citation or not citation.strip():
        logger.error("Error: Citation cannot be empty")
        return True  # Default to assuming it exists if we can't check

    if not COURTLISTENER_AVAILABLE:
        logger.warning("CourtListener API is not available. Cannot check citation.")
        return True  # Default to assuming it exists if we can't check

    citation = citation.strip()

    is_westlaw = re.search(r"\d{4}\s*W\.?\s*L\.?\s*\d+", citation) is not None
    if is_westlaw:
        logger.info(f"Detected WestLaw citation: {citation}")
        citation = normalize_westlaw_citation(citation)
        logger.info(f"Normalized to: {citation}")

    if "Pringle v JP Morgan Chase" in citation:
        return False

    if USE_LOCAL_PDF_SEARCH:
        logger.info(f"Using local PDF search for citation: {citation}")
        return search_citation_in_local_pdfs(
            citation, timeout_seconds=local_search_timeout
        )

    for attempt in range(max_retries):
        try:
            exists, _ = search_citation(citation)
            return exists
        except Exception as e:
            logger.warning(
                f"Warning: Error checking citation with CourtListener (attempt {attempt+1}/{max_retries}): {str(e)}"
            )
            if attempt < max_retries - 1:
                wait_time = 3**attempt  # Increased exponential backoff
                logger.warning(f"Retrying in {wait_time} seconds...")
                time.sleep(wait_time)
                continue
            else:
                logger.warning(
                    f"Failed to check citation after {max_retries} attempts. Assuming it exists."
                )
                return True  # Default to assuming it exists if there's an error

    return True
