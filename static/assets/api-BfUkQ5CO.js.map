{"version":3,"file":"api-BfUkQ5CO.js","sources":["../../src/api/api.js"],"sourcesContent":["import axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Get base URL from environment variables\nconst baseURL = '/casestrainer/api';  // Use relative path for Vite proxy\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL,\n  timeout: 120000, // 2 minutes default timeout\n  // Remove default Content-Type header to let browser set it for FormData\n});\n\n// Log API configuration in development\nif (import.meta.env.DEV) {\n  console.log('API Configuration:', {\n    baseURL,\n    environment: import.meta.env.MODE,\n    apiBaseUrl: import.meta.env.VITE_API_BASE_URL,\n    fullUrl: `${baseURL}/analyze`\n  });\n}\n\n// Add request interceptor to set specific timeouts for different endpoints\napi.interceptors.request.use(config => {\n  // Set longer timeout for URL analysis\n  if (config.url === '/analyze' && config.data && config.data.type === 'url') {\n    config.timeout = 300000; // 5 minutes for URL analysis\n    config.retryCount = 0;\n    config.maxRetries = 3;\n  } else {\n    config.timeout = 120000; // 2 minutes for other endpoints\n    config.retryCount = 0;\n    config.maxRetries = 1;\n  }\n  return config;\n});\n\n// Add response interceptor for retry logic\napi.interceptors.response.use(\n  response => response,\n  async error => {\n    const config = error.config;\n    \n    // Only retry on timeout or network errors\n    if (!config || !config.retryCount || \n      config.retryCount >= config.maxRetries || \n      !(error.code === 'ECONNABORTED' || error.message.includes('timeout') || error.message.includes('Network Error'))) {\n      return Promise.reject(error);\n    }\n\n    // Increment retry count\n    config.retryCount += 1;\n    \n    // Calculate delay with exponential backoff\n    const delay = Math.min(1000 * Math.pow(2, config.retryCount), 30000);\n    \n    // Log retry attempt\n    console.log(`Retrying request to ${config.url} (attempt ${config.retryCount}/${config.maxRetries}) after ${delay}ms delay`);\n    \n    // Wait before retrying\n    await new Promise(resolve => setTimeout(resolve, delay));\n    \n    // Retry the request\n    return api(config);\n  }\n);\n\n// Request interceptor for API requests\napi.interceptors.request.use(\n  (config) => {\n    // Add API key to headers\n    config.headers['X-API-Key'] = import.meta.env.VITE_COURTLISTENER_API_KEY || '443a87912e4f444fb818fca454364d71e4aa9f91';\n    \n    // Only set Content-Type for non-FormData requests\n    if (!(config.data instanceof FormData)) {\n      config.headers['Content-Type'] = 'application/json';\n    }\n    \n    // Log request details in development\n    if (import.meta.env.DEV) {\n      console.log('API Request:', {\n        method: config.method,\n        url: config.url,\n        baseURL: config.baseURL,\n        headers: config.headers,\n        dataType: config.data instanceof FormData ? 'FormData' : 'JSON'\n      });\n    }\n    \n    return config;\n  },\n  (error) => {\n    console.error('API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => {\n    // Log successful responses in development\n    if (import.meta.env.DEV) {\n      console.log('API Response:', {\n        status: response.status,\n        url: response.config.url,\n        data: response.data\n      });\n    }\n    return response;\n  },\n  (error) => {\n    // Enhanced error logging\n    if (error.response) {\n      console.error('API Error Response:', {\n        status: error.response.status,\n        url: error.config?.url,\n        data: error.response.data,\n        headers: error.response.headers\n      });\n    } else if (error.request) {\n      console.error('API Request Error (No Response):', {\n        url: error.config?.url,\n        message: error.message\n      });\n    } else {\n      console.error('API Error:', error.message);\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Add response interceptor for better error handling\napi.interceptors.response.use(\n  response => response,\n  error => {\n    if (error.config && error.config.url === '/analyze' && error.config.data && error.config.data.type === 'url') {\n      // Handle URL-specific errors\n      if (error.response) {\n        switch (error.response.status) {\n          case 400:\n            error.message = 'Invalid URL or content type not supported';\n            break;\n          case 404:\n            error.message = 'URL not found or content not accessible';\n            break;\n          case 429:\n            error.message = 'Too many requests. Please try again in a few minutes';\n            break;\n          case 502:\n            error.message = 'Failed to fetch URL content. The server may be temporarily unavailable';\n            break;\n          case 504:\n            error.message = 'Request timed out while fetching URL content';\n            break;\n          default:\n            error.message = `Error fetching URL: ${error.response.status} ${error.response.statusText}`;\n        }\n      } else if (error.code === 'ECONNABORTED') {\n        error.message = 'Request timed out while fetching URL content';\n      } else if (error.code === 'ECONNREFUSED') {\n        error.message = 'Could not connect to the server';\n      } else if (error.code === 'ENOTFOUND') {\n        error.message = 'URL not found or domain does not exist';\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Add polling configuration\nconst POLLING_INTERVAL = 2000; // 2 seconds\nconst MAX_POLLING_TIME = 600000; // 10 minutes\nconst MAX_RETRIES = 3;\n\n// Add request tracking\nconst activeRequests = new Map();\n\n// Helper function to poll for results\nasync function pollForResults(requestId, startTime = Date.now()) {\n  if (Date.now() - startTime > MAX_POLLING_TIME) {\n    throw new Error('Request timed out after 10 minutes');\n  }\n  \n  try {\n    // Log the polling attempt\n    console.log('Polling for results:', {\n      taskId: requestId,\n      endpoint: `/task_status/${requestId}`,\n      elapsed: Date.now() - startTime,\n      baseURL\n    });\n\n    // Use the correct endpoint structure with explicit baseURL\n    const response = await api.get(`/task_status/${requestId}`, {\n      timeout: 30000, // 30 second timeout for status checks\n      validateStatus: function (status) {\n        return status < 500; // Accept any status less than 500\n      }\n    });\n    \n    // Log the response\n    console.log('Status check response:', {\n      taskId: requestId,\n      status: response.status,\n      data: response.data,\n      headers: response.headers\n    });\n    \n    // Add more detailed status handling\n    if (response.status === 404) {\n      // If we get a 404, the task might not be ready yet\n      console.log('Task not ready yet, retrying...', {\n        taskId: requestId,\n        elapsed: Date.now() - startTime,\n        endpoint: `/task_status/${requestId}`\n      });\n      await new Promise(resolve => setTimeout(resolve, POLLING_INTERVAL));\n      return pollForResults(requestId, startTime);\n    }\n    \n    if (response.data.status === 'completed') {\n      console.log('Task completed:', {\n        taskId: requestId,\n        elapsed: Date.now() - startTime,\n        citations: response.data.citations?.length || 0\n      });\n      return response.data;\n    } else if (response.data.status === 'failed') {\n      console.error('Task failed:', {\n        taskId: requestId,\n        error: response.data.error,\n        elapsed: Date.now() - startTime\n      });\n      throw new Error(response.data.error || 'Request failed');\n    } else if (response.data.status === 'processing' || response.data.status === 'queued' || response.data.status === 'pending') {\n      // Log processing status for debugging\n      console.log('Processing status:', {\n        taskId: requestId,\n        status: response.data.status,\n        progress: response.data.progress,\n        message: response.data.message,\n        queuePosition: response.data.queue_position,\n        estimatedWaitTime: response.data.estimated_wait_time,\n        citations: response.data.citations?.length || 0\n      });\n      \n      // Continue polling\n      await new Promise(resolve => setTimeout(resolve, POLLING_INTERVAL));\n      return pollForResults(requestId, startTime);\n    } else {\n      // Handle unknown status\n      console.warn('Unknown status received:', {\n        taskId: requestId,\n        status: response.data.status,\n        data: response.data\n      });\n      await new Promise(resolve => setTimeout(resolve, POLLING_INTERVAL));\n      return pollForResults(requestId, startTime);\n    }\n  } catch (error) {\n    // Enhanced error handling with detailed logging\n    if (error.response) {\n      if (error.response.status === 404) {\n        console.log('Status endpoint not found, retrying...', {\n          taskId: requestId,\n          elapsed: Date.now() - startTime,\n          endpoint: `/task_status/${requestId}`,\n          baseURL,\n          response: error.response.data\n        });\n        await new Promise(resolve => setTimeout(resolve, POLLING_INTERVAL));\n        return pollForResults(requestId, startTime);\n      } else {\n        console.error('Status check failed:', {\n          taskId: requestId,\n          status: error.response.status,\n          data: error.response.data,\n          headers: error.response.headers,\n          endpoint: `/task_status/${requestId}`,\n          baseURL\n        });\n        throw new Error(`Status check failed: ${error.response.status} ${error.response.statusText}`);\n      }\n    } else if (error.request) {\n      console.error('No response received for status check:', {\n        taskId: requestId,\n        message: error.message,\n        endpoint: `/task_status/${requestId}`,\n        baseURL\n      });\n      throw new Error('No response received from server');\n    } else {\n      console.error('Error checking status:', {\n        taskId: requestId,\n        message: error.message,\n        endpoint: `/task_status/${requestId}`,\n        baseURL\n      });\n      throw error;\n    }\n  }\n}\n\n// Update the analyze function to use the consolidated /analyze endpoint\nexport const analyze = async (requestData) => {\n    // Set appropriate timeout based on input type\n    const timeout = requestData.type === 'url' ? 300000 : 120000; // 5 minutes for URLs, 2 minutes for others\n    \n    try {\n        // Log the analyze request\n        console.log('Starting analysis:', {\n            type: requestData.type,\n            isFormData: requestData instanceof FormData,\n            baseURL,\n            endpoint: '/analyze'\n        });\n\n        // If requestData is FormData (file upload), don't set Content-Type header\n        // Otherwise, use application/json for other requests\n        const headers = requestData instanceof FormData ? {} : {\n            'Content-Type': 'application/json'\n        };\n        \n        const response = await api.post('/analyze', requestData, {\n            timeout,\n            headers,\n            validateStatus: function (status) {\n                return status < 500; // Accept any status less than 500\n            }\n        });\n        \n        // Log the analyze response\n        console.log('Analysis response:', {\n            status: response.status,\n            data: response.data,\n            headers: response.headers\n        });\n        \n        // If we get a 202 Accepted, start polling\n        if (response.status === 202 && response.data.task_id) {\n            console.log('Starting polling for task:', {\n                taskId: response.data.task_id,\n                status: response.data.status,\n                message: response.data.message\n            });\n            return await pollForResults(response.data.task_id);\n        }\n        \n        return response.data;\n    } catch (error) {\n        console.error('Error in analyze request:', {\n            error,\n            type: requestData.type,\n            isFormData: requestData instanceof FormData,\n            baseURL,\n            endpoint: '/analyze'\n        });\n        throw error;\n    }\n};\n\n// Add function to cancel active requests\nexport function cancelRequest(requestId) {\n  if (activeRequests.has(requestId)) {\n    activeRequests.delete(requestId);\n    return api.post(`/analyze/cancel/${requestId}`);\n  }\n  return Promise.resolve();\n}\n\n// Add function to get request status\nexport function getRequestStatus(requestId) {\n  return activeRequests.get(requestId) || null;\n}\n\n// Add function to get all active requests\nexport function getActiveRequests() {\n  return Array.from(activeRequests.entries()).map(([id, data]) => ({\n    id,\n    ...data\n  }));\n}\n\nexport default api;\n"],"names":[],"mappings":"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"}