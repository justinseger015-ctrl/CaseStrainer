**********************
Windows PowerShell transcript start
Start time: 20250731160446
Username: NETID\jafrank
RunAs User: NETID\jafrank
Configuration Name: 
Machine: HAUMEA (Microsoft Windows NT 10.0.20348.0)
Host Application: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -noexit -command try { . "c:\Users\jafrank\AppData\Local\Programs\Windsurf\resources\app\out\vs\workbench\contrib\terminal\common\scripts\shellIntegration.ps1" } catch {}
Process ID: 14000
PSVersion: 5.1.20348.3932
PSEdition: Desktop
PSCompatibleVersions: 1.0, 2.0, 3.0, 4.0, 5.0, 5.1.20348.3932
BuildVersion: 10.0.20348.3932
CLRVersion: 4.0.30319.42000
WSManStackVersion: 3.0
PSRemotingProtocolVersion: 2.3
SerializationVersion: 1.1.0.1
**********************
Transcript started, output file is D:\dev\casestrainer\logs\script_20250731_160445.log

=== Checking Docker Availability ===
[OK] Docker CLI is available: Docker version 28.3.2, build 578ccf6
[INFO] Docker is running in Linux containers mode
[OK] Docker Compose is available: Docker Compose version v2.38.2-desktop.1
[cslaunch] Starting interactive menu...

========================================
 Enhanced CaseStrainer Docker Launcher
                v1.3 (ENHANCED)
========================================

 1.  Quick Production Start (FASTEST)
    - Minimal checks, maximum speed

 2.  Smart Production Start (RECOMMENDED)
    - Intelligent build detection, balanced speed

 3.  Force Full Rebuild
    - Complete rebuild, use when needed

 4.   Advanced Diagnostics
 5.   Cache Management
 6.   Stop All Services
 7.  Quick Status Check
 8.  Run Production Server Test
 0.  Exit

TIP: Use option 1 for fastest startup!

Deleting all .pyc files and __pycache__ directories to prevent stale bytecode...
Analyzing code changes to determine rebuild strategy...
ðŸ„ Rebuilding backend image to ensure Python code changes are included...

=== Starting Docker Production Mode ===
Checking if Vue build is needed...
Vue build is up to date
OK Docker is running
OK Sufficient disk space (92.27 GB free)
Processing Vue frontend build...
Using cached Vue build check result: False
Vue build needed: False, ForceRebuild: False
OK Vue build up to date (skipping build)
Stopping existing Docker containers...
Running: docker-compose -f D:\dev\casestrainer\docker-compose.prod.yml down --timeout 30
Containers stopped successfully
Checking for any remaining 'casestrainer' containers...
No remaining 'casestrainer' containers found.

Starting Docker containers...
Using existing images (no rebuild needed)...
Docker compose command: docker-compose -f D:\dev\casestrainer\docker-compose.prod.yml up -d
OK Docker containers started successfully
Waiting for containers to initialize...

Waiting for services to initialize...
OK All services are ready
  Backend (127.0.0.1:5001): UP, Redis (127.0.0.1:6380): UP, RQ Worker: HEALTHY

=== Docker Production Mode Ready ===
INFO Production Site:  https://wolf.law.uw.edu/casestrainer

Local Development URLs:
Backend API:    http://localhost:5001/casestrainer/api/
Frontend Prod:  http://localhost:8080/
Nginx (HTTP):   http://localhost:80/
Nginx (HTTPS):  https://localhost:443/
Local Frontend: https://localhost/casestrainer/
API Health:     https://localhost/casestrainer/api/health

Docker Commands:
  View logs:    docker-compose -f docker-compose.prod.yml logs [service]
  Stop all:     docker-compose -f docker-compose.prod.yml down
  Restart:      docker-compose -f docker-compose.prod.yml restart [service]

Running adaptive learning pipeline...
Starting adaptive learning pipeline...
Using enhanced adaptive learning pipeline...
Running adaptive learning pipeline...
âœ… Adaptive learning pipeline completed successfully
âœ… Adaptive learning completed successfully

Running post-startup validation...
  Testing API endpoints...
  âœ… API health check passed
  âŒ Text processing test failed after 3 attempts
WARNING: Post-startup validation failed - system may have issues

=== Starting Docker Production Mode ===
Checking if Vue build is needed...
Vue build is up to date
OK Docker is running
OK Sufficient disk space (91.88 GB free)
Processing Vue frontend build...
Using cached Vue build check result: False
Vue build needed: False, ForceRebuild: False
OK Vue build up to date (skipping build)
Stopping existing Docker containers...
Running: docker-compose -f D:\dev\casestrainer\docker-compose.prod.yml down --timeout 30
Containers stopped successfully
Checking for any remaining 'casestrainer' containers...
No remaining 'casestrainer' containers found.

Starting Docker containers...
Using existing images (no rebuild needed)...
Docker compose command: docker-compose -f D:\dev\casestrainer\docker-compose.prod.yml up -d
OK Docker containers started successfully
Waiting for containers to initialize...

Waiting for services to initialize...
PS>TerminatingError(): "The pipeline has been stopped."
>> TerminatingError(): "The pipeline has been stopped."
PS>TerminatingError(): "The pipeline has been stopped."
>> TerminatingError(): "The pipeline has been stopped."
PS>TerminatingError(): "The pipeline has been stopped."
>> TerminatingError(): "The pipeline has been stopped."
]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps -a

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps -a --filter "name=casestrainer" --format "{{.Names}}"

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker logs casestrainer-backend-prod

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker logs casestrainer-nginx-prod

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps --filter "name=casestrainer" --format "{{.Names}}: {{.Status}}"

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker logs casestrainer-frontend-prod

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker logs casestrainer-redis-prod

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker logs casestrainer-rqworker-prod

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker logs casestrainer-backend-prod 2>&1 | Select-String -Pattern "error|task|async|celery|rq" -Context 2,2

  2025-07-31 23:07:05 - root - WARNING - [DEBUG]
sys.executable: /usr/local/bin/python3.10
  2025-07-31 23:07:05 - root - WARNING - [DEBUG] sys.path:
['/usr/local/bin', '/app', '/usr/local/lib/python310.zip',
'/usr/local/lib/python3.10',
'/usr/local/lib/python3.10/lib-dynload',
'/usr/local/lib/python3.10/site-packages', '/app']
> 2025-07-31 23:07:05 - root - WARNING - Redis/RQ not
available - falling back to local processing
  2025-07-31 23:07:05 - src.app_final_vue - INFO -
vue_api_endpoints imported successfully
  2025-07-31 23:07:05 - src.app_final_vue - INFO - Vue API
blueprint registered successfully - PRODUCTION API ACTIVE
  2025-07-31 23:07:05 - src.app_final_vue - INFO - Route:
/casestrainer/api/analyze -> Endpoint: vue_api.analyze
  2025-07-31 23:07:05 - src.app_final_vue - INFO - Route:
/casestrainer/api/analyze_enhanced -> Endpoint:
vue_api.analyze_enhanced
> 2025-07-31 23:07:05 - src.app_final_vue - INFO - Route:
/casestrainer/api/task_status/<task_id> -> Endpoint:
vue_api.task_status
  2025-07-31 23:07:05 - src.app_final_vue - INFO - Route:
/casestrainer/api/processing_progress -> Endpoint:
vue_api.processing_progress
  2025-07-31 23:07:05 - src.app_final_vue - INFO - Route:
/casestrainer/api/export -> Endpoint: vue_api.export_citations
  [DEBUG PRINT] No clusters found, checking if we can rebuild
from citation metadata
  2025-07-31 23:08:01 - src.api.services.citation_service -
WARNING - No clusters found, checking if we can rebuild from
citation metadata
> 2025-07-31 23:08:01 - src.vue_api_endpoints - INFO -
Immediate processing result: {'status': 'completed',
'citations': [{'citation': '534 F.3d 1290', 'case_name':
'United States v. Caraway', 'extracted_case_name': 'N/A',
'canonical_name': 'United States v. Caraway',
'extracted_date': None, 'canonical_date': '2008-07-28',
'verified': True, 'court': None, 'confidence': 0.8, 'method':
'regex', 'pattern': 'f3d', 'context': '534 F.3d 1290',
'start_index': 0, 'end_index': 13, 'is_parallel': False,
'is_cluster': False, 'parallel_citations': [],
'cluster_members': [], 'pinpoint_pages': [], 'docket_numbers':
[], 'case_history': [], 'publication_status': None, 'url': 'htt
ps://www.courtlistener.com/opinion/171021/united-states-v-caraw
ay/', 'source': 'CourtListener-search-validated', 'error':
None, 'metadata': {'courtlistener_source':
'CourtListener-search-validated'}, 'verification_method':
'N/A', 'validation_passed': 'N/A', 'fallback_source': 'N/A'}],
'clusters': [], 'statistics': {'total_citations': 1,
'text_length': 13}}
  2025-07-31 23:08:01 - src.vue_api_endpoints - INFO -
Returning successful immediate processing result
  2025-07-31 23:08:01 - src.app_final_vue - INFO - [RESPONSE
#3] POST vue_api.analyze -> 200 (887 chars)
  [DEBUG PRINT] No clusters found, checking if we can rebuild
from citation metadata
  2025-07-31 23:08:02 - src.api.services.citation_service -
WARNING - No clusters found, checking if we can rebuild from
citation metadata
> 2025-07-31 23:08:02 - src.vue_api_endpoints - INFO -
Immediate processing result: {'status': 'completed',
'citations': [{'citation': '534 F.3d 1290', 'case_name':
'United States v. Caraway', 'extracted_case_name': 'N/A',
'canonical_name': 'United States v. Caraway',
'extracted_date': None, 'canonical_date': '2008-07-28',
'verified': True, 'court': None, 'confidence': 0.8, 'method':
'regex', 'pattern': 'f3d', 'context': '534 F.3d 1290',
'start_index': 0, 'end_index': 13, 'is_parallel': False,
'is_cluster': False, 'parallel_citations': [],
'cluster_members': [], 'pinpoint_pages': [], 'docket_numbers':
[], 'case_history': [], 'publication_status': None, 'url': 'htt
ps://www.courtlistener.com/opinion/171021/united-states-v-caraw
ay/', 'source': 'CourtListener-search-validated', 'error':
None, 'metadata': {'courtlistener_source':
'CourtListener-search-validated'}, 'verification_method':
'N/A', 'validation_passed': 'N/A', 'fallback_source': 'N/A'}],
'clusters': [], 'statistics': {'total_citations': 1,
'text_length': 13}}
  2025-07-31 23:08:02 - src.vue_api_endpoints - INFO -
Returning successful immediate processing result
  2025-07-31 23:08:02 - src.app_final_vue - INFO - [RESPONSE
#4] POST vue_api.analyze -> 200 (887 chars)
  2025-07-31 23:08:20 - src.vue_api_endpoints - INFO - Content
type: multipart/form-data;
boundary=----WebKitFormBoundaryDCl0yOr5UmsmNHhE
  2025-07-31 23:08:20 - src.vue_api_endpoints - INFO - File
upload detected in request.files
> 2025-07-31 23:08:20 - rq.queue - DEBUG - Pushed job
c703e50e-917c-463a-af9f-ec0c506e153f into casestrainer
> 2025-07-31 23:08:20 - src.vue_api_endpoints - INFO - Queued
file processing task c703e50e-917c-463a-af9f-ec0c506e153f for
background processing
  2025-07-31 23:08:20 - src.app_final_vue - INFO - [RESPONSE
#6] POST vue_api.analyze -> 202 (188 chars)
> 2025-07-31 23:08:20 - src.app_final_vue - INFO - [RESPONSE
#7] GET vue_api.task_status -> 200 (184 chars)
> 2025-07-31 23:08:22 - src.app_final_vue - INFO - [RESPONSE
#8] GET vue_api.task_status -> 200 (163 chars)
> 2025-07-31 23:08:24 - src.app_final_vue - INFO - [RESPONSE
#9] GET vue_api.task_status -> 200 (163 chars)
> 2025-07-31 23:08:26 - src.app_final_vue - INFO - [RESPONSE
#10] GET vue_api.task_status -> 200 (163 chars)
> 2025-07-31 23:08:28 - src.app_final_vue - INFO - [RESPONSE
#11] GET vue_api.task_status -> 200 (163 chars)
> 2025-07-31 23:08:30 - src.app_final_vue - INFO - [RESPONSE
#12] GET vue_api.task_status -> 200 (163 chars)
> 2025-07-31 23:08:32 - src.app_final_vue - INFO - [RESPONSE
#13] GET vue_api.task_status -> 200 (163 chars)
> 2025-07-31 23:08:34 - src.app_final_vue - INFO - [RESPONSE
#14] GET vue_api.task_status -> 200 (163 chars)
> 2025-07-31 23:08:36 - src.app_final_vue - INFO - [RESPONSE
#15] GET vue_api.task_status -> 200 (163 chars)
> 2025-07-31 23:08:38 - src.app_final_vue - INFO - [RESPONSE
#16] GET vue_api.task_status -> 200 (163 chars)
  2025-07-31 23:08:39 - src.vue_api_endpoints - WARNING -
VERSION file not found, using 'development'
  2025-07-31 23:08:39 - src.app_final_vue - INFO - [RESPONSE
#17] GET vue_api.health_check -> 200 (449 chars)
> 2025-07-31 23:08:40 - src.app_final_vue - INFO - [RESPONSE
#18] GET vue_api.task_status -> 200 (163 chars)
> 2025-07-31 23:08:42 - src.app_final_vue - INFO - [RESPONSE
#19] GET vue_api.task_status -> 200 (163 chars)
> 2025-07-31 23:08:45 - src.app_final_vue - INFO - [RESPONSE
#20] GET vue_api.task_status -> 200 (163 chars)
> 2025-07-31 23:08:47 - src.app_final_vue - INFO - [RESPONSE
#21] GET vue_api.task_status -> 200 (163 chars)
> 2025-07-31 23:08:49 - src.app_final_vue - INFO - [RESPONSE
#22] GET vue_api.task_status -> 200 (163 chars)
> 2025-07-31 23:08:51 - src.app_final_vue - INFO - [RESPONSE
#23] GET vue_api.task_status -> 200 (163 chars)
> 2025-07-31 23:08:53 - src.app_final_vue - INFO - [RESPONSE
#24] GET vue_api.task_status -> 200 (163 chars)
> 2025-07-31 23:08:55 - src.app_final_vue - INFO - [RESPONSE
#25] GET vue_api.task_status -> 200 (163 chars)
> 2025-07-31 23:08:58 - src.app_final_vue - INFO - [RESPONSE
#26] GET vue_api.task_status -> 200 (163 chars)
> 2025-07-31 23:09:01 - src.app_final_vue - INFO - [RESPONSE
#27] GET vue_api.task_status -> 200 (163 chars)
> 2025-07-31 23:09:04 - src.app_final_vue - INFO - [RESPONSE
#28] GET vue_api.task_status -> 200 (9203 chars)
  2025-07-31 23:09:10 - src.vue_api_endpoints - WARNING -
VERSION file not found, using 'development'
  2025-07-31 23:09:10 - src.app_final_vue - INFO - [RESPONSE
#29] GET vue_api.health_check -> 200 (449 chars)
  2025-07-31 23:09:20 - src.app_final_vue - INFO - [RESPONSE
#30] GET vue_api.processing_progress -> 200 (133 chars)
> 2025-07-31 23:09:20 - src.app_final_vue - INFO - [RESPONSE
#31] GET vue_api.task_status -> 200 (9203 chars)
  2025-07-31 23:09:40 - src.vue_api_endpoints - WARNING -
VERSION file not found, using 'development'
  2025-07-31 23:09:40 - src.app_final_vue - INFO - [RESPONSE
#32] GET vue_api.health_check -> 200 (449 chars)


]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker exec casestrainer-backend-prod redis-cli ping

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker exec casestrainer-backend-prod env | grep -i redis
grep : The term 'grep' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the 
spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:45
+ docker exec casestrainer-backend-prod env | grep -i redis
+                                             ~~~~
    + CategoryInfo          : ObjectNotFound: (grep:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
grep : The term 'grep' is not recognized as the name of a
cmdlet, function, script file, or operable program. Check the
spelling of the name, or if a path was included, verify that
the path is correct and try again.
At line:1 char:45
+ docker exec casestrainer-backend-prod env | grep -i redis
+                                             ~~~~
    + CategoryInfo          : ObjectNotFound: (grep:String) []
   , CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>./cslaunch restart
>> TerminatingError(cslaunch.ps1): "Cannot validate argument on parameter 'Mode'. The argument "restart" does not belong to the set "Production,Diagnostics,Menu,Cache,Test,Debug" specified by the ValidateSet attribute. Supply an argument that is in the set and then try the command again."
D:\dev\casestrainer\cslaunch.ps1 : Cannot validate argument on parameter 'Mode'. The argument "restart" does not belong 
to the set "Production,Diagnostics,Menu,Cache,Test,Debug" specified by the ValidateSet attribute. Supply an argument 
that is in the set and then try the command again.
At line:1 char:12
+ ./cslaunch restart
+            ~~~~~~~
    + CategoryInfo          : InvalidData: (:) [cslaunch.ps1], ParameterBindingValidationException
    + FullyQualifiedErrorId : ParameterArgumentValidationError,cslaunch.ps1
D:\dev\casestrainer\cslaunch.ps1 : Cannot validate argument on
parameter 'Mode'. The argument "restart" does not belong to
the set "Production,Diagnostics,Menu,Cache,Test,Debug"
specified by the ValidateSet attribute. Supply an argument
that is in the set and then try the command again.
At line:1 char:12
+ ./cslaunch restart
+            ~~~~~~~
    + CategoryInfo          : InvalidData: (:) [cslaunch.ps1],
    ParameterBindingValidationException
    + FullyQualifiedErrorId : ParameterArgumentValidationError
   ,cslaunch.ps1

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>Get-Content .\cslaunch.ps1 | Select-String -Pattern 'param\(' -Context 0,10

> param(
      [ValidateSet("Production", "Diagnostics", "Menu",
"Cache", "Test", "Debug")]
      [string]$Mode = "Menu",
      [switch]$Help,
      [switch]$AutoRestart,
      [switch]$SkipVueBuild,
      [switch]$QuickStart,
      [switch]$ForceRebuild,
      [switch]$TestAPI,
      [switch]$TestFrontend,
      [switch]$ShowLogs,
>     param()

      $requiredTools = @(
          @{Name = 'Docker'; Command = 'docker --version'},
          @{Name = 'Docker Compose'; Command = 'docker-compose
--version'},
          @{Name = 'Node.js'; Command = 'node --version'},
          @{Name = 'npm'; Command = 'npm --version'},
          @{Name = 'Python'; Command = 'python --version'}
      )

      $allToolsAvailable = $true
>     param()

      Write-Host "`n=== Checking Docker Availability ==="
-ForegroundColor Cyan

      # Check if Docker CLI is available
      try {
          $dockerVersion = docker --version 2>&1
          if ($LASTEXITCODE -ne 0) {
              throw "Docker command failed"
          }
          Write-Host ("[OK] Docker CLI is available: {0}" -f
$dockerVersion.Trim()) -ForegroundColor Green
>     param()

      # List of required environment variables
      $requiredVars = @(
          'COURTLISTENER_API_KEY',
          'FLASK_ENV',
          'FLASK_APP',
          'SECRET_KEY'
      )

      $allVarsPresent = $true
>     param()

      Write-Host "`n=== Checking Docker Availability ==="
-ForegroundColor Cyan

      # Check if docker command is available
      try {
          $dockerVersion = docker --version 2>&1
          if ($LASTEXITCODE -ne 0) {
              throw "Docker command failed"
          }
          Write-Host "[OK] Docker CLI is available:
$($dockerVersion.Trim())" -ForegroundColor Green
>     param()

      $logDir = Join-Path $PSScriptRoot "logs"
      if (-not (Test-Path $logDir)) {
          try {
              New-Item -ItemType Directory -Path $logDir
-Force | Out-Null
          }
          catch {
              Write-Warning "Could not create log directory:
$($_.Exception.Message)"
          }
      }
>     param(
          [Parameter(Mandatory)]
          [string]$Message,
          [ValidateSet("INFO", "WARN", "ERROR", "DEBUG")]
          [string]$Level = "INFO",
          [System.Management.Automation.ErrorRecord]$Exception
= $null
      )

      $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
      $logEntry = "[$timestamp] [$Level] $Message"
      if ($Exception) {
>     param()

      Write-Host "Clearing all caches..." -ForegroundColor
Yellow

      # Clear script cache
      $script:CachedChecks = @{
          DockerAvailable = $null
          VueBuildNeeded = $null
          NpmInstallNeeded = $null
          NpmPath = $null
          LastCheckTime = $null
>     param()

      $requiredFiles = @(
          "docker-compose.prod.yml",
          "casestrainer-vue-new"
      )

      foreach ($file in $requiredFiles) {
          $path = Join-Path $PSScriptRoot $file
          if (-not (Test-Path $path)) {
              throw "Required file/directory not found: $file"
>     param([switch]$Force)

      # If Force is specified, always return true
      if ($Force) {
          Write-Host "Force flag specified - Vue build
required" -ForegroundColor Gray
          $script:CachedChecks.VueBuildNeeded = $true
          return $true
      }

      # Use cached result if recent (within 30 seconds) and
not forcing
      if ($script:CachedChecks.LastCheckTime -and `
>     param()

      # Use cached result if recent
      if ($script:CachedChecks.LastCheckTime -and `
          ((Get-Date) -
$script:CachedChecks.LastCheckTime).TotalSeconds -lt 30 -and `
          $null -ne $script:CachedChecks.NpmInstallNeeded) {
          Write-Host "Using cached npm install check result:
$($script:CachedChecks.NpmInstallNeeded)" -ForegroundColor Gray
          return $script:CachedChecks.NpmInstallNeeded
      }

      $vueDir = Join-Path $PSScriptRoot "casestrainer-vue-new"
>     param()

      # Check if npm is already in PATH and working
      try {
          $npmVersion = npm --version 2>$null
          if ($LASTEXITCODE -eq 0 -and $npmVersion) {
              return "npm"
          }
      } catch {
          Write-Host "npm not found in PATH" -ForegroundColor
Yellow
      }
>     param(
          [switch]$Quick,
          [switch]$ForceRebuild
      )

      $vueDir = Join-Path $PSScriptRoot "casestrainer-vue-new"
      Write-Host "Vue directory: $vueDir" -ForegroundColor Gray

      if (-not (Test-Path $vueDir)) {
          throw "Vue directory not found: $vueDir"
      }
>     param([switch]$Force)

      # Use cached result if recent and not forcing
      if (-not $Force -and `
          $script:CachedChecks.LastCheckTime -and `
          ((Get-Date) -
$script:CachedChecks.LastCheckTime).TotalSeconds -lt 60 -and `
          $null -ne $script:CachedChecks.DockerAvailable) {
          return $script:CachedChecks.DockerAvailable
      }

      try {
>     param()

      # Only check critical files for faster startup
      $keyFiles = @(
          "src\unified_citation_processor.py",
          "src\case_name_extraction_core.py",
          "docker-compose.prod.yml",
          "Dockerfile"
      )

      $cutoffTime = (Get-Date).AddHours(-1)  # Increased to 1
hour for fewer false positives
>     param(
          [int]$TimeoutMinutes = 5
      )

      Write-Host "`nWaiting for services to initialize..."
-ForegroundColor Yellow
      $timeout = (Get-Date).AddMinutes($TimeoutMinutes)
      $attempt = 0

      while ((Get-Date) -lt $timeout) {
          $attempt++
          Start-Sleep -Seconds 10
>     param(
          [string]$TestCitation = "534 F.3d 1290"
      )

      Write-Host "`n=== Testing API Functionality ===`n"
-ForegroundColor Cyan

      # Wait a moment for services to fully initialize
      Start-Sleep -Seconds 2

      # Initialize variables to track resources that need
cleanup
      $healthResponse = $null
>     param()

      Write-Host "`n=== Testing Frontend Functionality ===`n"
-ForegroundColor Cyan

      # Initialize variables to track resources that need
cleanup
      $frontendResponse = $null
      $content = $null
      $maxRetries = 3
      $retryDelay = 5
      $result = $false

>     param()

      Write-Host "`n=== Container Logs ===`n" -ForegroundColor
Cyan

      $dockerComposeFile = Join-Path $PSScriptRoot
"docker-compose.prod.yml"

      if (-not (Test-Path $dockerComposeFile)) {
          Write-Host "Docker compose file not found:
$dockerComposeFile" -ForegroundColor Red
          return
      }

>     param()

      if ($PSCmdlet.ShouldProcess("Service monitoring")) {
          Write-Host "Starting service monitoring..."
-ForegroundColor Cyan

          # Monitor container logs for errors
          $script:MonitoringJob = Start-Job -ScriptBlock {
              while ($true) {
                  try {
                      # Check for worker crashes
                      $workerLogs = docker logs
casestrainer-rqworker-prod --tail 10 2>$null
>     param()

      # Nginx is now managed by Docker Compose, so we don't
need to stop it manually
      # if ($PSCmdlet.ShouldProcess("Nginx", "Stop")) {
      #     Stop-NginxServer | Out-Null
      # }

      if ($script:MonitoringJob) {
          try {
              Stop-Job $script:MonitoringJob -ErrorAction
SilentlyContinue
              Remove-Job $script:MonitoringJob -ErrorAction
SilentlyContinue
>     param()

      if ($PSCmdlet.ShouldProcess("All monitoring services")) {
          Stop-ServiceMonitoring
          $script:AutoRestartEnabled = $false
      }
  }

  function Start-DockerProduction {
      [CmdletBinding(SupportsShouldProcess)]
      [OutputType([bool])]
>     param(
          [switch]$ForceRebuild,
          [switch]$NoValidation,
          [switch]$QuickStart,
          [switch]$SkipVueBuild
      )

      # Nginx is now managed by Docker Compose, so we don't
need to start it manually
      # Write-Host "`n=== Starting Nginx ===" -ForegroundColor
Cyan
      # $nginxStarted = Start-NginxServer
      # if (-not $nginxStarted) {
>     param()

      Write-Host "  Testing API endpoints..." -ForegroundColor
Gray

      try {
          # Test basic API health with retry logic
          $maxRetries = 3
          $retryDelay = 5
          $healthOK = $false

          for ($i = 1; $i -le $maxRetries; $i++) {
>     param()

      Write-Host "`n=== Advanced Production Diagnostics ===`n"
-ForegroundColor Cyan

      # Docker diagnostics
      Write-Host "Docker System Information:" -ForegroundColor
Yellow
      try {
          docker system info --format "table
{{.Name}}\t{{.Value}}" 2>$null | Select-Object -First 10
          Write-Host ""

          Write-Host "Container Status:" -ForegroundColor
Yellow
>     param()

      Write-Host "`n=== Cache Management ===`n"
-ForegroundColor Cyan

      Write-Host "Available cache operations:"
-ForegroundColor Yellow
      Write-Host "1. Clear Docker build cache"
-ForegroundColor Gray
      Write-Host "2. Clear npm cache" -ForegroundColor Gray
      Write-Host "3. Clear all caches" -ForegroundColor Gray
      Write-Host "4. Show cache status" -ForegroundColor Gray
      Write-Host ""

>     param()

      Write-Host "`n=== Stopping All Services ===`n"
-ForegroundColor Red

      if ($PSCmdlet.ShouldProcess("All Docker services",
"Stop")) {
          try {
              # Stop monitoring first
              Stop-ServiceMonitoring

              $dockerComposeFile = Join-Path $PSScriptRoot
"docker-compose.prod.yml"
              $stopProcess = Start-Process -FilePath
"docker-compose" -ArgumentList "-f", $dockerComposeFile,
"down" -Wait -NoNewWindow -PassThru -WorkingDirectory
$PSScriptRoot
>     param()

      Write-Host "`n=== Quick Status Check ===`n"
-ForegroundColor Magenta

      # Parallel status checks for speed
      $jobs = @()

      # Docker check
      $jobs += Start-Job -Name "Docker" -ScriptBlock {
          try {
              $null = docker version --format
"{{.Server.Version}}" 2>$null
>     param()

      Clear-Host
      Write-Host "`n" -ForegroundColor Cyan
      Write-Host "========================================"
-ForegroundColor Cyan
      Write-Host " Enhanced CaseStrainer Docker Launcher"
-ForegroundColor Cyan
      Write-Host "                v1.3 (ENHANCED)      "
-ForegroundColor Green
      Write-Host "========================================"
-ForegroundColor Cyan
      Write-Host ""
      Write-Host " 1.  Quick Production Start (FASTEST)"
-ForegroundColor Green
      Write-Host "    - Minimal checks, maximum speed"
>     param()

      if (-not $PSCmdlet.ShouldProcess("Adaptive learning
pipeline", "Start")) {
          return $false
      }

      Write-Host "Starting adaptive learning pipeline..."
-ForegroundColor Cyan

      try {
          # Check if enhanced adaptive learning script exists
          $enhancedAdaptiveScript = Join-Path $PSScriptRoot
"scripts\enhanced_adaptive_pipeline.ps1"
>     param(
          [string]$InputString,
          [hashtable]$AdditionalVars = @{}
      )

      # Get all environment variables
      $envVars = Get-ChildItem env: | ForEach-Object {
@{$_.Name = $_.Value} } | Merge-Hashtables

      # Add/override with any additional variables
      if ($AdditionalVars.Count -gt 0) {
          $envVars = $envVars + $AdditionalVars


]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>./cslaunch
Transcript started, output file is D:\dev\casestrainer\logs\script_20250731_161215.log

=== Checking Docker Availability ===
[OK] Docker CLI is available: Docker version 28.3.2, build 578ccf6
[INFO] Docker is running in Linux containers mode
[OK] Docker Compose is available: Docker Compose version v2.38.2-desktop.1
[cslaunch] Starting interactive menu...

========================================
 Enhanced CaseStrainer Docker Launcher
                v1.3 (ENHANCED)
========================================

 1.  Quick Production Start (FASTEST)
    - Minimal checks, maximum speed

 2.  Smart Production Start (RECOMMENDED)
    - Intelligent build detection, balanced speed

 3.  Force Full Rebuild
    - Complete rebuild, use when needed

 4.   Advanced Diagnostics
 5.   Cache Management
 6.   Stop All Services
 7.  Quick Status Check
 8.  Run Production Server Test
 0.  Exit

TIP: Use option 1 for fastest startup!

Deleting all .pyc files and __pycache__ directories to prevent stale bytecode...
Analyzing code changes to determine rebuild strategy...
ðŸ„ Rebuilding backend image to ensure Python code changes are included...

=== Starting Docker Production Mode ===
Checking if Vue build is needed...
Vue build is up to date
OK Docker is running
OK Sufficient disk space (91.76 GB free)
Processing Vue frontend build...
Using cached Vue build check result: False
Vue build needed: False, ForceRebuild: False
OK Vue build up to date (skipping build)
Stopping existing Docker containers...
Running: docker-compose -f D:\dev\casestrainer\docker-compose.prod.yml down --timeout 30
Containers stopped successfully
Checking for any remaining 'casestrainer' containers...
No remaining 'casestrainer' containers found.

Starting Docker containers...
Code changes detected: Rebuilding affected containers...
Docker compose command: docker-compose -f D:\dev\casestrainer\docker-compose.prod.yml up -d --build
ERROR: Failed to start Docker containers (exit code: 1)
Checking Docker daemon status...
Docker daemon is running (version: 28.3.2)
The issue may be with the compose file or container configuration
ERROR: Failed to start Docker containers (exit code: 1)

=== Starting Docker Production Mode ===
Checking if Vue build is needed...
Using cached Vue build check result: False
OK Docker is running
OK Sufficient disk space (91.78 GB free)
Processing Vue frontend build...
Using cached Vue build check result: False
Vue build needed: False, ForceRebuild: False
OK Vue build up to date (skipping build)
Stopping existing Docker containers...
Running: docker-compose -f D:\dev\casestrainer\docker-compose.prod.yml down --timeout 30
PS>TerminatingError(): "The pipeline has been stopped."
PS>TerminatingError(): "The pipeline has been stopped."
>> TerminatingError(): "The pipeline has been stopped."
PS>TerminatingError(): "The pipeline has been stopped."
>> TerminatingError(): "The pipeline has been stopped."
]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker logs casestrainer-redis-prod

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker-compose -f docker-compose.prod.yml up -d redis

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps -a --filter "name=redis"

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps -a --filter "name=redis" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}\t{{.State}}\t{{.Health}}"

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps -a --filter "name=redis" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}\t{{.State}}"

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker logs --tail 50 casestrainer-redis-prod

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>netstat -ano | findstr :6379

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>Get-Process -Id (Get-NetTCPConnection -LocalPort 6379).OwningProcess -ErrorAction SilentlyContinue
Get-NetTCPConnection : No MSFT_NetTCPConnection objects found with property 'LocalPort' equal to '6379'.  Verify the 
value of the property and retry.
At line:1 char:18
+ Get-Process -Id (Get-NetTCPConnection -LocalPort 6379).OwningProcess  ...
+                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (6379:UInt16) [Get-NetTCPConnection], CimJobException
    + FullyQualifiedErrorId : CmdletizationQuery_NotFound_LocalPort,Get-NetTCPConnection
Get-NetTCPConnection : No MSFT_NetTCPConnection objects found
with property 'LocalPort' equal to '6379'.  Verify the value
of the property and retry.
At line:1 char:18
+ Get-Process -Id (Get-NetTCPConnection -LocalPort
6379).OwningProcess  ...
+                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (6379:UInt16) [G
   et-NetTCPConnection], CimJobException
    + FullyQualifiedErrorId : CmdletizationQuery_NotFound_Loca
   lPort,Get-NetTCPConnection

PS>TerminatingError(Get-Process): "Cannot bind argument to parameter 'Id' because it is null."
Get-Process : Cannot bind argument to parameter 'Id' because it is null.
At line:1 char:17
+ ... Process -Id (Get-NetTCPConnection -LocalPort 6379).OwningProcess -Err ...
+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidData: (:) [Get-Process], ParameterBindingValidationException
    + FullyQualifiedErrorId : 
ParameterArgumentValidationErrorNullNotAllowed,Microsoft.PowerShell.Commands.GetProcessCommand
Get-Process : Cannot bind argument to parameter 'Id' because
it is null.
At line:1 char:17
+ ... Process -Id (Get-NetTCPConnection -LocalPort
6379).OwningProcess -Err ...
+
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidData: (:) [Get-Process],
   ParameterBindingValidationException
    + FullyQualifiedErrorId : ParameterArgumentValidationError
   NullNotAllowed,Microsoft.PowerShell.Commands.GetProcessCom
  mand

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>tasklist | findstr /i "redis"

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps --format "table {{.Names}}\t{{.Ports}}" | findstr 6379

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker stop docker-redis-1

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>./cslaunch
Transcript started, output file is D:\dev\casestrainer\logs\script_20250731_161604.log

=== Checking Docker Availability ===
[OK] Docker CLI is available: Docker version 28.3.2, build 578ccf6
[INFO] Docker is running in Linux containers mode
[OK] Docker Compose is available: Docker Compose version v2.38.2-desktop.1
[cslaunch] Starting interactive menu...

========================================
 Enhanced CaseStrainer Docker Launcher
                v1.3 (ENHANCED)
========================================

 1.  Quick Production Start (FASTEST)
    - Minimal checks, maximum speed

 2.  Smart Production Start (RECOMMENDED)
    - Intelligent build detection, balanced speed

 3.  Force Full Rebuild
    - Complete rebuild, use when needed

 4.   Advanced Diagnostics
 5.   Cache Management
 6.   Stop All Services
 7.  Quick Status Check
 8.  Run Production Server Test
 0.  Exit

TIP: Use option 1 for fastest startup!

Deleting all .pyc files and __pycache__ directories to prevent stale bytecode...
Analyzing code changes to determine rebuild strategy...
ðŸ„ Rebuilding backend image to ensure Python code changes are included...

=== Starting Docker Production Mode ===
Checking if Vue build is needed...
Vue build is up to date
OK Docker is running
OK Sufficient disk space (91.75 GB free)
Processing Vue frontend build...
Using cached Vue build check result: False
Vue build needed: False, ForceRebuild: False
OK Vue build up to date (skipping build)
Stopping existing Docker containers...
Running: docker-compose -f D:\dev\casestrainer\docker-compose.prod.yml down --timeout 30
Containers stopped successfully
Checking for any remaining 'casestrainer' containers...
No remaining 'casestrainer' containers found.

Starting Docker containers...
Code changes detected: Rebuilding affected containers...
Docker compose command: docker-compose -f D:\dev\casestrainer\docker-compose.prod.yml up -d --build
ERROR: Failed to start Docker containers (exit code: 1)
Checking Docker daemon status...
Docker daemon is running (version: 28.3.2)
The issue may be with the compose file or container configuration
ERROR: Failed to start Docker containers (exit code: 1)

=== Starting Docker Production Mode ===
Checking if Vue build is needed...
Using cached Vue build check result: False
OK Docker is running
OK Sufficient disk space (91.75 GB free)
Processing Vue frontend build...
Using cached Vue build check result: False
Vue build needed: False, ForceRebuild: False
OK Vue build up to date (skipping build)
Stopping existing Docker containers...
Running: docker-compose -f D:\dev\casestrainer\docker-compose.prod.yml down --timeout 30
PS>TerminatingError(): "The pipeline has been stopped."
PS>TerminatingError(): "The pipeline has been stopped."
>> TerminatingError(): "The pipeline has been stopped."
PS>TerminatingError(): "The pipeline has been stopped."
>> TerminatingError(): "The pipeline has been stopped."
]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker run --rm -p 6380:6379 --name test-redis redis:7-alpine

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker run --name test-redis -p 6381:6379 -d redis:7-alpine redis-server --loglevel debug

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker logs test-redis

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker rm -f test-redis

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>./cslaunch
Transcript started, output file is D:\dev\casestrainer\logs\script_20250731_161927.log

=== Checking Docker Availability ===
[OK] Docker CLI is available: Docker version 28.3.2, build 578ccf6
[INFO] Docker is running in Linux containers mode
[OK] Docker Compose is available: Docker Compose version v2.38.2-desktop.1
[cslaunch] Starting interactive menu...

========================================
 Enhanced CaseStrainer Docker Launcher
                v1.3 (ENHANCED)
========================================

 1.  Quick Production Start (FASTEST)
    - Minimal checks, maximum speed

 2.  Smart Production Start (RECOMMENDED)
    - Intelligent build detection, balanced speed

 3.  Force Full Rebuild
    - Complete rebuild, use when needed

 4.   Advanced Diagnostics
 5.   Cache Management
 6.   Stop All Services
 7.  Quick Status Check
 8.  Run Production Server Test
 0.  Exit

TIP: Use option 1 for fastest startup!

Deleting all .pyc files and __pycache__ directories to prevent stale bytecode...
Analyzing code changes to determine rebuild strategy...
ðŸ„ Rebuilding backend image to ensure Python code changes are included...

=== Starting Docker Production Mode ===
Checking if Vue build is needed...
Vue build is up to date
OK Docker is running
OK Sufficient disk space (91.75 GB free)
Processing Vue frontend build...
Using cached Vue build check result: False
Vue build needed: False, ForceRebuild: False
OK Vue build up to date (skipping build)
Stopping existing Docker containers...
Running: docker-compose -f D:\dev\casestrainer\docker-compose.prod.yml down --timeout 30
Containers stopped successfully
Checking for any remaining 'casestrainer' containers...
No remaining 'casestrainer' containers found.

Starting Docker containers...
Code changes detected: Rebuilding affected containers...
Docker compose command: docker-compose -f D:\dev\casestrainer\docker-compose.prod.yml up -d --build
PS>TerminatingError(): "The pipeline has been stopped."
PS>TerminatingError(): "The pipeline has been stopped."
>> TerminatingError(): "The pipeline has been stopped."
PS>TerminatingError(): "The pipeline has been stopped."
>> TerminatingError(): "The pipeline has been stopped."
]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker-compose -f docker-compose.prod.yml down

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker-compose -f docker-compose.prod.yml up -d redis

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps -a --filter "name=redis" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}\t{{.State}}\t{{.Health}}"

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker logs casestrainer-redis-prod

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker exec casestrainer-redis-prod redis-cli ping

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker-compose -f docker-compose.prod.yml up -d backend

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker logs casestrainer-backend-prod

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps --filter "name=backend" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker-compose -f docker-compose.prod.yml up -d rqworker rqworker2 rqworker3

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker exec casestrainer-redis-prod redis-cli CLIENT LIST | grep -i rq
grep : The term 'grep' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the 
spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:61
+ ... ocker exec casestrainer-redis-prod redis-cli CLIENT LIST | grep -i rq
+                                                                ~~~~
    + CategoryInfo          : ObjectNotFound: (grep:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
grep : The term 'grep' is not recognized as the name of a
cmdlet, function, script file, or operable program. Check the
spelling of the name, or if a path was included, verify that
the path is correct and try again.
At line:1 char:61
+ ... ocker exec casestrainer-redis-prod redis-cli CLIENT LIST
| grep -i rq
+
  ~~~~
    + CategoryInfo          : ObjectNotFound: (grep:String) []
   , CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker exec casestrainer-redis-prod redis-cli CLIENT LIST

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker logs casestrainer-rqworker-prod

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker-compose -f docker-compose.prod.yml up -d frontend-prod nginx-prod

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps -a

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps -a --filter "name=casestrainer" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps -a --filter "name=casestrainer-frontend" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker-compose -f docker-compose.prod.yml up -d frontend-prod

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps -a --filter "name=casestrainer-frontend" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker logs casestrainer-frontend-prod

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps -a --filter "name=casestrainer" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}\t{{.State}}"

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps -a

PS>TerminatingError(): "The pipeline has been stopped."
>> TerminatingError(): "The pipeline has been stopped."
]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>Get-Service -Name com.docker.service

Status   Name               DisplayName
------   ----               -----------
Stopped  com.docker.service Docker Desktop Service


]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>Start-Service -Name com.docker.service
Start-Service : Service 'Docker Desktop Service (com.docker.service)' cannot be started due to the following error: 
Cannot open com.docker.service service on computer '.'.
At line:1 char:1
+ Start-Service -Name com.docker.service
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (System.ServiceProcess.ServiceController:ServiceController) [Start-Service], 
ServiceCommandException
    + FullyQualifiedErrorId : CouldNotStartService,Microsoft.PowerShell.Commands.StartServiceCommand
Start-Service : Service 'Docker Desktop Service
(com.docker.service)' cannot be started due to the following
error: Cannot open com.docker.service service on computer '.'.
At line:1 char:1
+ Start-Service -Name com.docker.service
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (System.ServiceProces
   s.ServiceController:ServiceController) [Start-Service], Se
  rviceCommandException
    + FullyQualifiedErrorId : CouldNotStartService,Microsoft.P
   owerShell.Commands.StartServiceCommand

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps --filter "name=casestrainer"

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter "name=casestrainer"

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker logs casestrainer-frontend-prod

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter "name=casestrainer-*"

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps --filter "name=casestrainer-backend" --format "table {{.Names}}\t{{.Status}}"

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps --filter "name=casestrainer-rqworker" --format "table {{.Names}}\t{{.Status}}"

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps --filter "name=casestrainer-nginx" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker-compose -f docker-compose.prod.yml up -d nginx

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps --filter "name=casestrainer-nginx" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker logs casestrainer-nginx-prod

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker ps --filter "name=casestrainer" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker exec casestrainer-backend-prod ping -c 2 redis

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>curl -I http://localhost:5001/health
>> TerminatingError(): "The pipeline has been stopped."
>> TerminatingError(): "The pipeline has been stopped."
]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
]633;D]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>curl -k -I https://localhost/casestrainer/health
>> TerminatingError(Invoke-WebRequest): "A parameter cannot be found that matches parameter name 'k'."
Invoke-WebRequest : A parameter cannot be found that matches parameter name 'k'.
At line:1 char:6
+ curl -k -I https://localhost/casestrainer/health
+      ~~
    + CategoryInfo          : InvalidArgument: (:) [Invoke-WebRequest], ParameterBindingException
    + FullyQualifiedErrorId : NamedParameterNotFound,Microsoft.PowerShell.Commands.InvokeWebRequestCommand
Invoke-WebRequest : A parameter cannot be found that matches
parameter name 'k'.
At line:1 char:6
+ curl -k -I https://localhost/casestrainer/health
+      ~~
    + CategoryInfo          : InvalidArgument: (:) [Invoke-Web
   Request], ParameterBindingException
    + FullyQualifiedErrorId : NamedParameterNotFound,Microsoft
   .PowerShell.Commands.InvokeWebRequestCommand

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>Invoke-WebRequest -Uri "http://localhost/casestrainer/health" -Method Head -UseBasicParsing
>> TerminatingError(Invoke-WebRequest): "The remote server returned an error: (404) Not Found."
Invoke-WebRequest : The remote server returned an error: (404) Not Found.
At line:1 char:1
+ Invoke-WebRequest -Uri "http://localhost/casestrainer/health" -Method ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest], 
WebException
    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand
Invoke-WebRequest : The remote server returned an error: (404)
Not Found.
At line:1 char:1
+ Invoke-WebRequest -Uri
"http://localhost/casestrainer/health" -Method ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~
    + CategoryInfo          : InvalidOperation: (System.Net.Ht
   tpWebRequest:HttpWebRequest) [Invoke-WebRequest], WebExcep
  tion
    + FullyQualifiedErrorId : WebCmdletWebResponseException,Mi
   crosoft.PowerShell.Commands.InvokeWebRequestCommand

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>Invoke-WebRequest -Uri "http://localhost/health" -Method Head -UseBasicParsing
>> TerminatingError(Invoke-WebRequest): "The remote server returned an error: (404) Not Found."
Invoke-WebRequest : The remote server returned an error: (404) Not Found.
At line:1 char:1
+ Invoke-WebRequest -Uri "http://localhost/health" -Method Head -UseBas ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest], 
WebException
    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand
Invoke-WebRequest : The remote server returned an error: (404)
Not Found.
At line:1 char:1
+ Invoke-WebRequest -Uri "http://localhost/health" -Method
Head -UseBas ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~
    + CategoryInfo          : InvalidOperation: (System.Net.Ht
   tpWebRequest:HttpWebRequest) [Invoke-WebRequest], WebExcep
  tion
    + FullyQualifiedErrorId : WebCmdletWebResponseException,Mi
   crosoft.PowerShell.Commands.InvokeWebRequestCommand

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker exec casestrainer-nginx-prod nginx -T

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>Invoke-WebRequest -Uri "http://localhost/casestrainer/api/health" -Method Head -UseBasicParsing
>> TerminatingError(Invoke-WebRequest): "The remote server returned an error: (404) Not Found."
Invoke-WebRequest : The remote server returned an error: (404) Not Found.
At line:1 char:1
+ Invoke-WebRequest -Uri "http://localhost/casestrainer/api/health" -Me ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest], 
WebException
    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand
Invoke-WebRequest : The remote server returned an error: (404)
Not Found.
At line:1 char:1
+ Invoke-WebRequest -Uri
"http://localhost/casestrainer/api/health" -Me ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~
    + CategoryInfo          : InvalidOperation: (System.Net.Ht
   tpWebRequest:HttpWebRequest) [Invoke-WebRequest], WebExcep
  tion
    + FullyQualifiedErrorId : WebCmdletWebResponseException,Mi
   crosoft.PowerShell.Commands.InvokeWebRequestCommand

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>Invoke-WebRequest -Uri "http://localhost:5001/health" -Method Head -UseBasicParsing
>> TerminatingError(Invoke-WebRequest): "The remote server returned an error: (404) Not Found."
Invoke-WebRequest : The remote server returned an error: (404) Not Found.
At line:1 char:1
+ Invoke-WebRequest -Uri "http://localhost:5001/health" -Method Head -U ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest], 
WebException
    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand
Invoke-WebRequest : The remote server returned an error: (404)
Not Found.
At line:1 char:1
+ Invoke-WebRequest -Uri "http://localhost:5001/health"
-Method Head -U ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~
    + CategoryInfo          : InvalidOperation: (System.Net.Ht
   tpWebRequest:HttpWebRequest) [Invoke-WebRequest], WebExcep
  tion
    + FullyQualifiedErrorId : WebCmdletWebResponseException,Mi
   crosoft.PowerShell.Commands.InvokeWebRequestCommand

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker logs casestrainer-backend-prod

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>Invoke-WebRequest -Uri "http://localhost:5001/test" -Method Get -UseBasicParsing


StatusCode        : 200
StatusDescription : OK
Content           : Test route is working!
RawContent        : HTTP/1.1 200 OK
                    Access-Control-Allow-Credentials: true
                    Access-Control-Allow-Origin:
                    https://wolf.law.uw.edu
                    Access-Control-Expose-Headers:
                    Content-Disposition, Content-Type
                    Content-Length: 22
                    Con...
Forms             :
Headers           : {[Access-Control-Allow-Credentials, true],
                    [Access-Control-Allow-Origin,
                    https://wolf.law.uw.edu],
                    [Access-Control-Expose-Headers,
                    Content-Disposition, Content-Type],
                    [Content-Length, 22]...}
Images            : {}
InputFields       : {}
Links             : {}
ParsedHtml        :
RawContentLength  : 22



]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>Invoke-WebRequest -Uri "http://localhost/casestrainer/" -Method Get -UseBasicParsing
>> TerminatingError(Invoke-WebRequest): "
404 Not Found

404 Not Found
nginx/1.29.0


"
Invoke-WebRequest : 
404 Not Found

404 Not Found
nginx/1.29.0



At line:1 char:1
+ Invoke-WebRequest -Uri "http://localhost/casestrainer/" -Method Get - ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest], 
WebException
    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand
Invoke-WebRequest :
404 Not Found

404 Not Found
nginx/1.29.0



At line:1 char:1
+ Invoke-WebRequest -Uri "http://localhost/casestrainer/"
-Method Get - ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~
    + CategoryInfo          : InvalidOperation: (System.Net.Ht
   tpWebRequest:HttpWebRequest) [Invoke-WebRequest], WebExcep
  tion
    + FullyQualifiedErrorId : WebCmdletWebResponseException,Mi
   crosoft.PowerShell.Commands.InvokeWebRequestCommand
]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>docker-compose -f docker-compose.prod.yml restart nginx

]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>Invoke-WebRequest -Uri "http://localhost/casestrainer/" -Method Get -UseBasicParsing
>> TerminatingError(Invoke-WebRequest): "The underlying connection was closed: Could not establish trust relationship for the SSL/TLS secure channel."
Invoke-WebRequest : The underlying connection was closed: Could not establish trust relationship for the SSL/TLS secure 
channel.
At line:1 char:1
+ Invoke-WebRequest -Uri "http://localhost/casestrainer/" -Method Get - ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest], 
WebException
    + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand
Invoke-WebRequest : The underlying connection was closed:
Could not establish trust relationship for the SSL/TLS secure
channel.
At line:1 char:1
+ Invoke-WebRequest -Uri "http://localhost/casestrainer/"
-Method Get - ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~
    + CategoryInfo          : InvalidOperation: (System.Net.Ht
   tpWebRequest:HttpWebRequest) [Invoke-WebRequest], WebExcep
  tion
    + FullyQualifiedErrorId : WebCmdletWebResponseException,Mi
   crosoft.PowerShell.Commands.InvokeWebRequestCommand

]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>cd 'd:\dev\casestrainer'
]633;D;0]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
PS>.\start_casestrainer.bat
  â
]633;D;1]633;A]633;P;Cwd=D:\x5cdev\x5ccasestrainerPS D:\dev\casestrainer> ]633;B
