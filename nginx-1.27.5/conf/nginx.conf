worker_processes  1;

events {
    worker_connections  1024;
}

# HTTP/HTTPS configuration
http {
    # Main server block for port 80 (HTTP)
    server {
        listen 80;
        server_name wolf.law.uw.edu localhost 127.0.0.1 128.208.154.3;
        
        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }
    # Map variable for WebSocket connection upgrade
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=50r/s;

    # Temp paths
    client_body_temp_path "temp/client_body_temp";
    fastcgi_temp_path "temp/fastcgi_temp";
    proxy_temp_path "temp/proxy_temp";
    scgi_temp_path "temp/scgi_temp";
    uwsgi_temp_path "temp/uwsgi_temp";

    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  300;
    keepalive_requests 100;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml application/javascript;
    gzip_disable "MSIE [1-9]\.";

    # Main server block for port 443 (HTTPS)
    server {
        listen 443 ssl;
        http2 on;
        server_name wolf.law.uw.edu localhost 127.0.0.1 128.208.154.3;
        
        # SSL configuration
        ssl_certificate D:/CaseStrainer/ssl/WolfCertBundle.crt;
        ssl_certificate_key D:/CaseStrainer/ssl/wolf.law.uw.edu.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;

        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_trusted_certificate D:/CaseStrainer/ssl/WolfCertBundle.crt;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;

        # Security headers
        add_header Strict-Transport-Security "max-age=63072000" always;
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Content-Security-Policy "default-src 'self' https://wolf.law.uw.edu; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net; img-src 'self' data:; font-src 'self' data: https://cdn.jsdelivr.net; connect-src 'self' https://wolf.law.uw.edu wss:;";
        add_header Referrer-Policy strict-origin-when-cross-origin;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()";

        # Error logging
        error_log logs/casestrainer_error.log debug;
        access_log logs/casestrainer_access.log combined;
        
        # Block and don't log RDP connections
        if ($http_user_agent ~* "(ms-term-serv|mstshash|tsclient-host)") {
            access_log off;
            return 444;
        }

        # Root location - redirect to /casestrainer
        location = / {
            return 301 https://$host/casestrainer/;
        }

        # Route /casestrainer to Vue dev server
        location /casestrainer/ {
            # Remove the /casestrainer prefix when forwarding to Vue dev server
            rewrite ^/casestrainer/(.*)$ /$1 break;
            
            proxy_pass http://127.0.0.1:3000/;  # Vue dev server on port 3000
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Prefix /casestrainer;
            
            # WebSocket support
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Disable buffering for development
            proxy_buffering off;
        }

        # Block RDP protocol detection via web
        if ($http_user_agent ~* "(ms-term-serv|mstshash|tsclient-host)") {
            return 444;
        }

        # CaseStrainer API with enhanced rate limiting
        location /casestrainer/api/ {
            limit_req zone=api burst=50 nodelay;

            # Proxy to backend (Flask on 5001)
            proxy_pass http://127.0.0.1:5001/;  # Note: Removed /api/ from here
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Prefix /casestrainer/api;
            
            # Handle CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            # File upload settings
            client_max_body_size 50M;
            proxy_request_buffering off;
            
            # API-specific timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 300s;

            # Buffer settings
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;

            # Disable buffering for API responses
            proxy_buffering off;

            # CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

            # Handle OPTIONS method for CORS preflight
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        # Serve static files directly (if needed)
        location /casestrainer/static/ {
            alias "C:/Users/jafrank/OneDrive - UW/Documents/GitHub/CaseStrainer/static/";
            expires 30d;
            access_log off;
            add_header Cache-Control "public, no-transform";
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root html;
        }

        # Redirect root to /casestrainer
        location = / {
            return 301 https://$host/casestrainer/;
        }
    }

    # Default server block - catch all other requests
    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        http2 on;
        server_name _;
        
        # SSL configuration (same as main server block)
        ssl_certificate D:/CaseStrainer/ssl/WolfCertBundle.crt;
        ssl_certificate_key D:/CaseStrainer/ssl/wolf.law.uw.edu.key;
        
        # Return 404 for all requests
        location / {
            return 404;
        }
    }
}