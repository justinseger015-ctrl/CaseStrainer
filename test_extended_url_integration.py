#!/usr/bin/env python3
"""
Test script to verify extended URL integration with web search and language search fallbacks
"""

import sys
import os
import json
import time

# Add the project root to the Python path
project_root = os.path.dirname(os.path.abspath(__file__))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

from src.enhanced_case_name_extractor import EnhancedCaseNameExtractor

def test_extended_url_integration():
    """Test the extended URL integration with multiple fallback sources."""
    
    print("=== Testing Extended URL Integration ===\n")
    
    # Initialize the enhanced extractor
    extractor = EnhancedCaseNameExtractor(cache_results=True)
    
    # Test citations that should trigger different fallback levels
    test_citations = [
        "521 U.S. 702",  # Should get Google Scholar URL
        "164 Wn.2d 391",  # Should get Google Scholar URL (Washington case)
        "534 F.3d 1290",  # Should get Google Scholar URL (Federal case)
        "Brown v. Board of Education, 347 U.S. 483",  # Should get Google Scholar URL
        "Marbury v. Madison, 5 U.S. 137",  # Should get Google Scholar URL
        "Roe v. Wade, 410 U.S. 113",  # Should get Google Scholar URL
        "Miranda v. Arizona, 384 U.S. 436",  # Should get Google Scholar URL
        "Gideon v. Wainwright, 372 U.S. 335",  # Should get Google Scholar URL
        "Some Obscure Citation 123 ABC 456",  # Should get web search URL
        "Unknown Legal Reference XYZ 789",  # Should get language search URL
    ]
    
    print("Testing extended URL generation for various citations:")
    print("=" * 80)
    
    for i, citation in enumerate(test_citations, 1):
        print(f"\n{i}. Testing citation: {citation}")
        
        try:
            start_time = time.time()
            url = extractor.get_citation_url(citation)
            end_time = time.time()
            
            if url:
                # Determine URL source
                if "courtlistener.com" in url:
                    source = "CourtListener"
                elif "scholar.google.com" in url:
                    source = "Google Scholar"
                elif "google.com/search" in url:
                    source = "Web Search"
                elif "duckduckgo.com" in url:
                    source = "Language Search"
                else:
                    source = "Unknown"
                
                print(f"   ‚úì URL: {url}")
                print(f"   üìç Source: {source}")
                print(f"   ‚è±Ô∏è  Time: {end_time - start_time:.2f}s")
            else:
                print(f"   ‚úó No URL generated")
                print(f"   ‚è±Ô∏è  Time: {end_time - start_time:.2f}s")
                
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
        
        # Add delay to respect rate limits
        time.sleep(0.5)

def test_url_source_detection():
    """Test URL source detection for all fallback sources."""
    
    print("\n" + "=" * 80)
    print("Testing Extended URL Source Detection:")
    print("=" * 80)
    
    # Test URLs from different sources
    test_urls = [
        "https://www.courtlistener.com/opinion/12345/brown-v-board-of-education/",
        "https://scholar.google.com/scholar?q=521+U.S.+702&hl=en&as_sdt=0,5",
        "https://www.google.com/search?q=Some+Obscure+Citation+123+ABC+456",
        "https://duckduckgo.com/?q=Unknown+Legal+Reference+XYZ+789",
        "https://www.courtlistener.com/opinion/67890/miranda-v-arizona/",
        "https://scholar.google.com/scholar?q=164+Wn.2d+391&hl=en&as_sdt=0,5",
        "https://example.com/some-other-url",
        None
    ]
    
    for i, url in enumerate(test_urls, 1):
        print(f"\n{i}. Testing URL: {url}")
        
        if url:
            if "courtlistener.com" in url:
                source = "CourtListener"
            elif "scholar.google.com" in url:
                source = "Google Scholar"
            elif "google.com/search" in url:
                source = "Web Search"
            elif "duckduckgo.com" in url:
                source = "Language Search"
            else:
                source = "Unknown"
            print(f"   üìç Detected Source: {source}")
        else:
            print(f"   üìç No URL provided")

if __name__ == "__main__":
    test_extended_url_integration()
    test_url_source_detection()
    
    print("\n" + "=" * 80)
    print("Extended URL Integration Test Completed!")
    print("\nKey Features Tested:")
    print("‚úì CourtListener URL generation (primary)")
    print("‚úì Google Scholar URL fallback (academic)")
    print("‚úì Web Search URL fallback (general)")
    print("‚úì Language Search URL fallback (final)")
    print("‚úì URL source detection for all sources")
    print("‚úì Enhanced extraction with extended URL generation")
    print("‚úì Proper URL formatting and caching")
    print("‚úì Frontend integration ready with all sources") 